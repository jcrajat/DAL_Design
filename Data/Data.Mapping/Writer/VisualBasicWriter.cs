using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using CM.Tools.Misellaneous;
using CMData.Schemas;
using Tools;

namespace Data.Mapping.Writer
{
    internal static class VisualBasicWriter
    {
        #region Funciones

        public static StringBuilder WriteDataBaseManager(XsdDataBase.TBL_ConnectionRow nConnection,
                                                         string nCatalogClassName, string nNamespaceMap)
        {
            var SourceCode = new StringBuilder();

            // Escribir el encabezado
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "'------------------------------------------------------------------------------");
            DataBaseClassWriter.Write(SourceCode, 0, "' <auto-generated>");
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "'     Este código fue generado automaticamente por una herramienta de propiedad de CargoMaster");
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "'     Versión del motor en tiempo de ejecución: " + Program.AssemblyVersion);
            DataBaseClassWriter.Write(SourceCode, 0, "' </auto-generated>");
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "'------------------------------------------------------------------------------");
            DataBaseClassWriter.Write(SourceCode, 0, "' Conexion: " + nConnection.Connection_Name);
            DataBaseClassWriter.Write(SourceCode, 0, "");

            // Escribir el namespace
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "Namespace " + nNamespaceMap + (nNamespaceMap == "" ? "" : ".") +
                                      nCatalogClassName);
            DataBaseClassWriter.Write(SourceCode, 0, "");

            // Escribir inicio de la clase DBManager
            DataBaseClassWriter.Write(SourceCode, 1, "Partial Public Class " + nCatalogClassName + "DBManager");
            DataBaseClassWriter.Write(SourceCode, 0, "");

            DataBaseClassWriter.Write(SourceCode, 1, "End Class");
            DataBaseClassWriter.Write(SourceCode, 0, "End Namespace");

            return SourceCode;
        }

        public static StringBuilder WriteDataBaseManagerDesigner(XsdDataBase.TBL_ConnectionRow nConnection,
                                                                 string nCatalogClassName, string nCatalog,
                                                                 string nNamespaceMap, XsdDataBase nDataBaseMap,
                                                                 bool IsMobile, bool UseFramework2)
        {
            var SourceCode = new StringBuilder();
            var schemas =
                CMData.DataBase.DataBase.GetDistinctRows(
                    nDataBaseMap.TBL_Object.Select("fk_Connection = " + nConnection.id_Connection +
                                                   " AND Catalog_Name = '" + nCatalog + "' AND Selected = 1"),
                    "Schema_Name");

            //Encabezado del archivo
            WriteBeginSource(ref SourceCode, nConnection.Connection_Name, nNamespaceMap, nCatalogClassName);

            // Escribir la clase
            WriteDatabaseManagerClass(ref SourceCode, nDataBaseMap, nConnection.id_Connection, nCatalogClassName,
                                      schemas, nCatalog);

            // Escribir enumeración de esquemas
            DataBaseClassWriter.Write(SourceCode, 0, "");
            DataBaseClassWriter.Write(SourceCode, 1, "#Region \"Enumeraciones del DBManager\"");
            DataBaseClassWriter.Write(SourceCode, 0, "");
            WriteSchemaEnum(ref SourceCode, nDataBaseMap, nConnection.id_Connection, nCatalogClassName, nCatalog,
                            schemas);
            DataBaseClassWriter.Write(SourceCode, 0, "");
            DataBaseClassWriter.Write(SourceCode, 1, "#End Region");
            DataBaseClassWriter.Write(SourceCode, 0, "");

            // Escribir las clases de los esquemas
            WriteSchemaManager(ref SourceCode, nCatalog, schemas, nDataBaseMap, nConnection.id_Connection, IsMobile,
                               UseFramework2);

            // Escribir los datasets
            WriteDatasets(ref SourceCode, schemas, nCatalog, nDataBaseMap, nConnection.id_Connection, IsMobile);

            // Final del archivo
            WriteEndSource(ref SourceCode);

            return SourceCode;
        }

        private static string GetConvertFuncion(string nStringType)
        {
            return nStringType + ".Parse";
        }

        #endregion

        #region Metodos

        private static void WriteBeginSource(ref StringBuilder nSourceCode, string nConnectionName, string nNamespaceMap,
                                             string nCatalogClassName)
        {
            // Escribir el encabezado
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "'------------------------------------------------------------------------------");
            DataBaseClassWriter.Write(nSourceCode, 0, "' <auto-generated>");
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "'     Este código fue generado automaticamente por una herramienta de propiedad de CargoMaster");
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "'     Versión del motor en tiempo de ejecución: " + Program.AssemblyVersion);
            DataBaseClassWriter.Write(nSourceCode, 0, "'");
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si");
            DataBaseClassWriter.Write(nSourceCode, 0, "'     se vuelve a generar el código.");
            DataBaseClassWriter.Write(nSourceCode, 0, "' </auto-generated>");
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "'------------------------------------------------------------------------------");
            DataBaseClassWriter.Write(nSourceCode, 0, "' Conexion: " + nConnectionName);
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Escribir el namespace
            DataBaseClassWriter.Write(nSourceCode, 0, getNamespace(nNamespaceMap, nCatalogClassName));
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static string getNamespace(string nNamespaceMap, string nCatalogNameFormated)
        {
            return "Namespace " + nNamespaceMap + (nNamespaceMap == "" ? "" : ".") + nCatalogNameFormated;
        }

        private static void WriteEndSource(ref StringBuilder nSourceCode)
        {
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 0, "End Namespace");
        }

        private static void WriteDatabaseManagerClass(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                                      int nidConnection, string nCatalogClassName, DataTable schemas,
                                                      string nCatalogName)
        {
            // Escribir inicio de la clase DBManager
            DataBaseClassWriter.Write(nSourceCode, 1, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "''' Clase encargada de encapsular todos los accesos a la base de datos " +
                                      nCatalogName);
            DataBaseClassWriter.Write(nSourceCode, 1, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "Partial Public Class " + nCatalogClassName + "DBManager");
            DataBaseClassWriter.Write(nSourceCode, 2, "Inherits DBManager");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Declaracion variables locales de los esquemas
            DataBaseClassWriter.Write(nSourceCode, 2, "#Region \" Declaraciones \"");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Private _Schema" + SchemaConfig.Schema_Alias + " As " +
                                          SchemaConfig.Schema_Alias + "Schema");
            }
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 2, "#End Region");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Propiedades de acceso a los esquemas
            DataBaseClassWriter.Write(nSourceCode, 2, "#Region \" Propiedades \"");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public ReadOnly Property Schema" + SchemaConfig.Schema_Alias + "() As " +
                                          SchemaConfig.Schema_Alias + "Schema");
                DataBaseClassWriter.Write(nSourceCode, 3, "Get");
                DataBaseClassWriter.Write(nSourceCode, 4, "Return _Schema" + SchemaConfig.Schema_Alias);
                DataBaseClassWriter.Write(nSourceCode, 3, "End Get");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Property");
            }
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 2, "Public Overrides Property ClassFileName() As String");
            DataBaseClassWriter.Write(nSourceCode, 3, "Get");
            DataBaseClassWriter.Write(nSourceCode, 4, "Return Me.GetType().Name");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Get");
            DataBaseClassWriter.Write(nSourceCode, 2, "End Property");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 2, "#End Region");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 2, "#End Region");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Constructores de la clase
            DataBaseClassWriter.Write(nSourceCode, 2, "#Region \" Constructores \"");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 2, "Public Sub New(ByVal nConnectionString As String)");
            DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New(nConnectionString)");

            DataBaseClassWriter.Write(nSourceCode, 3, "Initialize()");
            DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 2, "Private Sub Initialize()");
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "_Schema" + SchemaConfig.Schema_Alias + " = New " + SchemaConfig.Schema_Alias +
                                          "Schema(Me)");
            }

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Inicializar mapeo de esquemas
            DataBaseClassWriter.Write(nSourceCode, 3, "If (Me.SchemaMaping.Schemas.Count = 0) Then");
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "Me.SchemaMaping.Schemas.Add(\"" + SchemaConfig.Schema_Alias + "\", \"" +
                                          SchemaConfig.Schema_Name + "\")");
            }
            DataBaseClassWriter.Write(nSourceCode, 3, "End If");

            DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 2, "#End Region");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 1, "End Class");
        }

        private static void WriteSchemaEnum(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap, int nidConnection,
                                            string nCatalogClassName, string nCatalog, DataTable schemas)
        {
            DataBaseClassWriter.Write(nSourceCode, 1, "'''<summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "'''Enumeración de los esquemas de la base de datos " + nCatalog);
            DataBaseClassWriter.Write(nSourceCode, 1, "'''</summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + nCatalogClassName + "SchemaEnum");
            DataBaseClassWriter.Write(nSourceCode, 2, "Inherits SchemaEnum");

            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Shared ReadOnly " + SchemaConfig.Schema_Alias + " As New " +
                                          nCatalogClassName + "SchemaEnum(\"" + SchemaConfig.Schema_Name + "\")");
            }

            DataBaseClassWriter.Write(nSourceCode, 2, "Sub New(nSchemaName As String)");
            DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New(nSchemaName)");
            DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

            DataBaseClassWriter.Write(nSourceCode, 1, "End Class");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 1, "'''<summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "'''Colección de esquemas enumerados de la base de datos" + nCatalog);
            DataBaseClassWriter.Write(nSourceCode, 1, "'''</summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + nCatalogClassName + "SchemaEnumList");
            DataBaseClassWriter.Write(nSourceCode, 2, "Inherits SchemaEnumList");
            DataBaseClassWriter.Write(nSourceCode, 2, "Public Sub New()");
            DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 2, "Public Sub New(nSchema As " + nCatalogClassName + "SchemaEnum)");
            DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.Add(nSchema)");
            DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 1, "End Class");
        }

        private static void WriteSchemaManager(ref StringBuilder nSourceCode, string nCatalog, DataTable schemas,
                                               XsdDataBase nDataBaseMap, int nidConnection, bool IsMobile,
                                               bool UseFramework2)
        {
            // Recorrer los esquemas
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                // objetos del esquema
                string sqlFilter = "Generic_Type = 'Table' AND Catalog_Name = '" + nCatalog + "' AND Schema_Name = '" +
                                   SchemaConfig.Schema_Name + "' AND Selected = 1";
                var tablas = (XsdDataBase.TBL_ObjectRow[]) (nDataBaseMap.TBL_Object.Select(sqlFilter));

                sqlFilter = "Generic_Type = 'View' AND Catalog_Name = '" + nCatalog + "' AND Schema_Name = '" +
                            SchemaConfig.Schema_Name + "' AND Selected = 1";
                var vistas = (XsdDataBase.TBL_ObjectRow[]) (nDataBaseMap.TBL_Object.Select(sqlFilter));

                sqlFilter = "Generic_Type = 'StoredProcedure' AND Catalog_Name = '" + nCatalog + "' AND Schema_Name = '" +
                            SchemaConfig.Schema_Name + "' AND Selected = 1";
                var procedimientos = (XsdDataBase.TBL_ObjectRow[]) (nDataBaseMap.TBL_Object.Select(sqlFilter));

                // Escribir inicio de la clase
                DataBaseClassWriter.Write(nSourceCode, 1, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "''' Clase encargada de encapsular las funcionalidades de acceso al esquema " +
                                          SchemaConfig.Schema_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "''' </summary>");
                DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + SchemaConfig.Schema_Alias + "Schema");
                DataBaseClassWriter.Write(nSourceCode, 2, "Inherits SchemaManager");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Declaracion variables locales del esquema
                DataBaseClassWriter.Write(nSourceCode, 2, "#Region \" Declaraciones \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WriteDeclaracionesEsquema(ref nSourceCode, tablas, SchemaConfig.Schema_Alias, "Table");
                WriteDeclaracionesEsquema(ref nSourceCode, vistas, SchemaConfig.Schema_Alias, "View");
                WriteDeclaracionesEsquema(ref nSourceCode, procedimientos, SchemaConfig.Schema_Alias, "StoreProcedure");
                DataBaseClassWriter.Write(nSourceCode, 2, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Declaracion propiedades del esquema
                DataBaseClassWriter.Write(nSourceCode, 2, "#Region \" Propiedades \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WritePropiedadesEsquema(ref nSourceCode, tablas, SchemaConfig.Schema_Alias, "Table");
                WritePropiedadesEsquema(ref nSourceCode, vistas, SchemaConfig.Schema_Alias, "View");
                WritePropiedadesEsquema(ref nSourceCode, procedimientos, SchemaConfig.Schema_Alias, "StoreProcedure");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Constructores
                DataBaseClassWriter.Write(nSourceCode, 2, "#Region \" Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "Friend Sub New(ByVal nDbManager As DBManager)");
                DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New(nDbManager)");

                DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.SchemaAlias = \"" + SchemaConfig.Schema_Alias + "\"");
                DataBaseClassWriter.Write(nSourceCode, 3, "Initialize()");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "Private Sub Initialize()");

                WriteInitializeEsquema(ref nSourceCode, tablas, SchemaConfig.Schema_Alias, "Table");
                WriteInitializeEsquema(ref nSourceCode, vistas, SchemaConfig.Schema_Alias, "View");
                WriteInitializeEsquema(ref nSourceCode, procedimientos, SchemaConfig.Schema_Alias, "StoreProcedure");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 1, "End Class");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Enumeraciones
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "#Region \"Enumeraciones del esquema " + SchemaConfig.Schema_Name + "\"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WriteObjectEnum(ref nSourceCode, SchemaConfig.Schema_Name, SchemaConfig.Schema_Alias, tablas, "Table");
                WriteObjectEnum(ref nSourceCode, SchemaConfig.Schema_Name, SchemaConfig.Schema_Alias, vistas, "View");
                WriteObjectEnum(ref nSourceCode, SchemaConfig.Schema_Name, SchemaConfig.Schema_Alias, procedimientos,
                                "StoredProcedure");
                DataBaseClassWriter.Write(nSourceCode, 1, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Escribir el Namespace del esquema
                DataBaseClassWriter.Write(nSourceCode, 1, "Namespace Schema" + SchemaConfig.Schema_Alias);
                DataBaseClassWriter.Write(nSourceCode, 1, "");

                // Escribir objetos
                DataBaseClassWriter.Write(nSourceCode, 2, "#Region \"Objetos de acceso a datos\"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WriteTables(ref nSourceCode, nDataBaseMap, tablas);
                WriteViews(ref nSourceCode, nDataBaseMap, vistas);
                WriteStoreProcedures(ref nSourceCode, nDataBaseMap, procedimientos);
                DataBaseClassWriter.Write(nSourceCode, 2, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Escribir las tablas tipadas
                DataBaseClassWriter.Write(nSourceCode, 2, "#Region \"Tablas tipadas\"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WriteDataTables(ref nSourceCode, nDataBaseMap, tablas, IsMobile, UseFramework2);
                WriteDataTables(ref nSourceCode, nDataBaseMap, vistas, IsMobile, UseFramework2);
                DataBaseClassWriter.Write(nSourceCode, 2, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 1, "End Namespace");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

            } //Fin de esquemas
        }

        private static void WriteObjectEnum(ref StringBuilder nSourceCode, string SchemaName, string nCatalogClassName,
                                            XsdDataBase.TBL_ObjectRow[] nObjetos, string nTipo)
        {
            DataBaseClassWriter.Write(nSourceCode, 1, "'''<summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "'''Enumeración de " + nTipo + " del esquema " + SchemaName);
            DataBaseClassWriter.Write(nSourceCode, 1, "'''</summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + nCatalogClassName + nTipo + "Enum");
            DataBaseClassWriter.Write(nSourceCode, 2, "Inherits ObjectEnum");

            foreach (var objeto in nObjetos)
            {
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Shared ReadOnly " + FormatCode.ToIdentifier(objeto.Object_Name) +
                                          " As New " + nCatalogClassName + nTipo + "Enum(\"" + objeto.Object_Name +
                                          "\")");
            }

            DataBaseClassWriter.Write(nSourceCode, 2, "Sub New(n" + nTipo + "Name As String)");
            DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New(n" + nTipo + "Name)");
            DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 1, "End Class");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 1, "'''<summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "'''Colección de " + nTipo + " enumerados del esquema " + SchemaName);
            DataBaseClassWriter.Write(nSourceCode, 1, "'''</summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + nCatalogClassName + nTipo + "EnumList");
            DataBaseClassWriter.Write(nSourceCode, 2, "Inherits ObjectEnumList");
            DataBaseClassWriter.Write(nSourceCode, 2, "Public Sub New()");
            DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 2,
                                      "Public Sub New(n" + nTipo + " As " + nCatalogClassName + nTipo + "Enum)");
            DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.Add(n" + nTipo + ")");
            DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 1, "End Class");

            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDeclaracionesEsquema(ref StringBuilder nSourceCode, XsdDataBase.TBL_ObjectRow[] objetos,
                                                      string SchemaNameFormated, string nTipo)
        {
            DataBaseClassWriter.Write(nSourceCode, 2, "'" + nTipo);
            foreach (var objeto in objetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(objeto.Object_Name);

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Private _" + ObjetNameFormated + " As Schema" + SchemaNameFormated + "." +
                                          ObjetNameFormated + nTipo);
            }

            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WritePropiedadesEsquema(ref StringBuilder nSourceCode, XsdDataBase.TBL_ObjectRow[] objetos,
                                                    string SchemaNameFormated, string nTipo)
        {
            DataBaseClassWriter.Write(nSourceCode, 2, "'" + nTipo);
            foreach (var objeto in objetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(objeto.Object_Name);

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public ReadOnly Property " + ObjetNameFormated + "() As Schema" +
                                          SchemaNameFormated + "." + ObjetNameFormated + nTipo);
                DataBaseClassWriter.Write(nSourceCode, 3, "Get");
                DataBaseClassWriter.Write(nSourceCode, 4, "Return Me._" + ObjetNameFormated);
                DataBaseClassWriter.Write(nSourceCode, 3, "End Get");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Property");
            }

            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteInitializeEsquema(ref StringBuilder nSourceCode, XsdDataBase.TBL_ObjectRow[] objetos,
                                                   string SchemaNameFormated, string nTipo)
        {
            DataBaseClassWriter.Write(nSourceCode, 3, "'" + nTipo);
            foreach (var objeto in objetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(objeto.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          " Me._" + ObjetNameFormated + " = New Schema" + SchemaNameFormated + "." +
                                          ObjetNameFormated + nTipo + "(Me)");
            }
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteTables(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                        XsdDataBase.TBL_ObjectRow[] nObjetos)
        {
            foreach (var Objeto in nObjetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(Objeto.Object_Name);
                var ObjetNameFormatedType = ObjetNameFormated + "Table";

                DataBaseClassWriter.Write(nSourceCode, 2, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "''' Clase encargada de encapsular las funcionalidades de acceso a la tabla " +
                                          Objeto.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 2, "''' </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "Public Class " + ObjetNameFormatedType);
                DataBaseClassWriter.Write(nSourceCode, 3, "Inherits TableManager");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Constructores
                DataBaseClassWriter.Write(nSourceCode, 3, "#Region \" Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "Friend Sub New(ByVal nSchemaManager As SchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.New(nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase._ObjectName = \"" + Objeto.Object_Name + "\"");

                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#Region \"Metodos\"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Llaves primarias
                var PrimaryKeys = nDataBaseMap.GetPrimaryKeys(Objeto);
                // Columnas
                var TableColumns = nDataBaseMap.GetTableColumns(Objeto);
                // Identificador unico de la tabla ( Puede hacer parte de una llave compuesta )
                var KeyParam = nDataBaseMap.GetIdOnPrimaryKey(Objeto);
                // LLaves foraneas que se encuentran en la llave primaria
                //var nPrimaryForeingKeys = nDataBaseMap.GetForeignsOnPrimaryKeys(Objeto);


                // Implementacion de DBInsert
                WriteDBInsert(ref nSourceCode, TableColumns);
                WriteDBInsertTyped(ref nSourceCode, TableColumns, Objeto.Object_Name);

                foreach (var Key in KeyParam)
                {
                    // Implementacion de DBNextId
                    WriteDBNextId(ref nSourceCode, PrimaryKeys, Key, KeyParam.Count > 1);

                    // Implementacion de DBSaveTableAutoNextId
                    WriteDBSaveTableAutoNextId(ref nSourceCode, TableColumns, PrimaryKeys, Key, KeyParam.Count > 1);
                    WriteDBSaveTableAutoNextIdTyped(ref nSourceCode, TableColumns, PrimaryKeys, Key, ObjetNameFormated,
                                                    KeyParam.Count > 1);
                }

                // Implementacion de DBUpdate
                WriteDBUpdate(ref nSourceCode, TableColumns, PrimaryKeys);
                WriteDBUpdateTyped(ref nSourceCode, TableColumns, PrimaryKeys, Objeto.Object_Name);

                // Implementacion de DBSaveTable
                WriteDBSaveTable(ref nSourceCode, TableColumns, PrimaryKeys);
                WriteDBSaveTableTyped(ref nSourceCode, TableColumns, PrimaryKeys, ObjetNameFormated);

                // Implementacion de DBDelete
                WriteDBDelete(ref nSourceCode, PrimaryKeys);

                // Implementacion de DBGet
                WriteDBGet(ref nSourceCode, PrimaryKeys, ObjetNameFormated);
                WriteDBGet(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);

                WriteDBGetOrderBy(ref nSourceCode, PrimaryKeys, ObjetNameFormated);
                WriteDBGetOrderBy(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);

                // Implementacion de DBFill
                WriteDBFill(ref nSourceCode, PrimaryKeys);
                WriteDBFill(ref nSourceCode, new List<Parameter>());

                WriteDBFillOrderBy(ref nSourceCode, PrimaryKeys, ObjetNameFormated);
                WriteDBFillOrderBy(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);

                WriteDBFillTyped(ref nSourceCode, PrimaryKeys, ObjetNameFormated);
                WriteDBFillTyped(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);

                WriteDBFillOrderByTyped(ref nSourceCode, PrimaryKeys, ObjetNameFormated);
                WriteDBFillOrderByTyped(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);

                // Filtros
                var filtros =
                    (XsdDataBase.TBL_FilterRow[]) (nDataBaseMap.TBL_Filter.Select("fk_Object = " + Objeto.id_Object));

                foreach (var filtro in filtros)
                {
                    int idMetodo = 0;

                    // Implementacion de DBFind
                    WriteDBFindBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);
                    WriteDBFindByOrderBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);

                    // Implementacion de DBFillBy
                    WriteDBFillBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro);
                    WriteDBFillByOrderBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 3, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Class");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteViews(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                       XsdDataBase.TBL_ObjectRow[] nObjetos)
        {
            foreach (var Objeto in nObjetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(Objeto.Object_Name);
                var ObjetNameFormatedType = ObjetNameFormated + "View";

                DataBaseClassWriter.Write(nSourceCode, 2, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "''' Clase encargada de encapsular las funcionalidades de acceso a la vista " +
                                          Objeto.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 2, "''' </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "Public Class " + ObjetNameFormatedType);
                DataBaseClassWriter.Write(nSourceCode, 3, "Inherits ViewManager");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Constructores
                DataBaseClassWriter.Write(nSourceCode, 3, "#Region \" Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "Friend Sub New(ByVal nSchemaManager As SchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.New(nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase._ObjectName = \"" + Objeto.Object_Name + "\"");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#Region \"Metodos\"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Columnas
                //var nViewColumns = nDataBaseMap.GetTableColumns(Objeto);
                var nPrimaryKeys = new List<Parameter>();

                // Implementacion de DBGet
                WriteDBGet(ref nSourceCode, nPrimaryKeys, ObjetNameFormated);
                WriteDBGetOrderBy(ref nSourceCode, nPrimaryKeys, ObjetNameFormated);

                // Implementacion de DBFill
                WriteDBFill(ref nSourceCode, nPrimaryKeys);
                WriteDBFillOrderBy(ref nSourceCode, nPrimaryKeys, ObjetNameFormated);
                WriteDBFillTyped(ref nSourceCode, nPrimaryKeys, ObjetNameFormated);
                WriteDBFillOrderByTyped(ref nSourceCode, nPrimaryKeys, ObjetNameFormated);

                // Filtros
                var filtros =
                    (XsdDataBase.TBL_FilterRow[]) (nDataBaseMap.TBL_Filter.Select("fk_Object = " + Objeto.id_Object));

                foreach (var filtro in filtros)
                {
                    int idMetodo = 0;

                    // Implementacion de DBFind
                    WriteDBFindBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);
                    WriteDBFindByOrderBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);

                    // Implementacion de DBFillBy
                    WriteDBFillBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro);
                    WriteDBFillByOrderBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 3, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Class");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteStoreProcedures(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                                 XsdDataBase.TBL_ObjectRow[] nObjetos)
        {
            foreach (var Objeto in nObjetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(Objeto.Object_Name);
                var ObjetNameFormatedType = ObjetNameFormated + "StoreProcedure";

                DataBaseClassWriter.Write(nSourceCode, 2, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "''' Clase encargada de encapsular las funcionalidades de acceso al procedimiento almacenado " +
                                          Objeto.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 2, "''' </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "Public Class " + ObjetNameFormatedType);
                DataBaseClassWriter.Write(nSourceCode, 3, "Inherits StoreProcedureManager");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Constructores
                DataBaseClassWriter.Write(nSourceCode, 3, "#Region \" Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "Friend Sub New(ByVal nSchemaManager As SchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.New(nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase._ObjectName = \"" + Objeto.Object_Name + "\"");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                string opetarionParams = "";
                var returnRows = Objeto.GetTBL_SP_ReturnRows();
                var retType = ReturnType.TablaGenerica;
                XsdDataBase.TBL_ObjectRow objectReturned = null;
                var dataTypeReturned = DbType.Object;

                if (returnRows.Length > 0)
                {
                    retType = (ReturnType) (Enum.Parse(typeof (ReturnType), returnRows[0].Return_Type));

                    switch (retType)
                    {
                        case ReturnType.TablaTipada:
                            var Filas =
                                nDataBaseMap.TBL_Object.Select("Schema_Name = '" + returnRows[0].Schema_Name_Returned +
                                                               "' AND Object_Name = '" +
                                                               returnRows[0].Object_Name_Returned + "'");

                            if (Filas.Length > 0)
                                objectReturned = (XsdDataBase.TBL_ObjectRow) (Filas[0]);
                            else
                                throw new Exception("El procedimiento almacenado " + Objeto.Object_Name +
                                                    ", retorna un objeto de tipo " + returnRows[0].Object_Name_Returned +
                                                    " que no se encuentra definido");

                            break;

                        case ReturnType.Escalar:
                            dataTypeReturned = (DbType) (Enum.Parse(typeof (DbType), returnRows[0].Data_Type_Returned));
                            break;
                    }
                }

                var nParameters = nDataBaseMap.GetParameters(Objeto);

                opetarionParams = "";

                foreach (var par in nParameters)
                {
                    if (opetarionParams != "")
                        opetarionParams += ", ";

                    opetarionParams = opetarionParams + "ByVal n" + par.Name.TrimStart('@') + " As " +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "#Region \"Metodos\"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                if (retType == ReturnType.Nada)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "'''Permite la ejecución del procedimiento almacenado " +
                                              Objeto.Object_Name);
                    DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    DataBaseClassWriter.Write(nSourceCode, 3, "Public Overloads Sub DBExecute(" + opetarionParams + ")");

                    DataBaseClassWriter.Write(nSourceCode, 4, "Dim nParameters As New List(Of Parameter)");

                    foreach (var par in nParameters)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4,
                                                  "nParameters.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                                  par.Type.ToString() + ", \"" + par.SpecificType + "\", n" +
                                                  par.Name.TrimStart('@') + ", " +
                                                  DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                                  par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                                  ", ParameterDirection." + par.Direction.ToString() + "))");
                    }

                    DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBExecuteSp(nParameters)");
                    DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                    DataBaseClassWriter.Write(nSourceCode, 0, "");
                }
                else
                {
                    var strReturnType = "";

                    switch (retType)
                    {
                        case ReturnType.Escalar:
                            strReturnType = DataBaseClassWriter.GetApplicationStringType(dataTypeReturned.ToString(),
                                                                                         LanguajeType.VB);
                            break;
                        case ReturnType.TablaTipada:
                            if (objectReturned != null)
                                strReturnType = "Schema" + FormatCode.ToIdentifier(objectReturned.Schema_Name) + "." +
                                                FormatCode.ToIdentifier(objectReturned.Object_Name) + "DataTable";
                            break;
                        case ReturnType.TablaGenerica:
                            strReturnType = "DataTable";
                            break;
                    }

                    DataBaseClassWriter.Write(nSourceCode, 3, "'''<summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "'''Permite la ejecución del procedimiento almacenado " +
                                              Objeto.Object_Name + " y retorna los datos encontrados");
                    DataBaseClassWriter.Write(nSourceCode, 3, "'''</summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "Public Overloads Function DBExecute(" + opetarionParams + ") As " +
                                              strReturnType);

                    DataBaseClassWriter.Write(nSourceCode, 4, "Dim nParameters As New List(Of Parameter)");

                    foreach (var par in nParameters)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4,
                                                  "nParameters.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                                  par.Type.ToString() + ", \"" + par.SpecificType + "\", n" +
                                                  par.Name.TrimStart('@') + ", " +
                                                  DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                                  par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                                  ", ParameterDirection." + par.Direction.ToString() + "))");
                    }

                    if (retType == ReturnType.Escalar)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4, "Try");
                        DataBaseClassWriter.Write(nSourceCode, 5, "Dim Value As " + strReturnType);
                        DataBaseClassWriter.Write(nSourceCode, 5, "Dim tableData As New DataTable");
                        DataBaseClassWriter.Write(nSourceCode, 5, "MyBase.DBExecuteSp(tableData, nParameters)");

                        DataBaseClassWriter.Write(nSourceCode, 5, "If(tableData.Rows.Count > 0) Then");
                        
                        if (strReturnType.ToUpper() == "BINARY")
                            DataBaseClassWriter.Write(nSourceCode, 6,"Value = CType(tableData.Rows(0)(0), Byte())");
                        else
                            DataBaseClassWriter.Write(nSourceCode, 6, "Value = CType(tableData.Rows(0)(0), " + strReturnType + ")");

                        DataBaseClassWriter.Write(nSourceCode, 6, "Return Value");
                        DataBaseClassWriter.Write(nSourceCode, 5, "Else");
                        DataBaseClassWriter.Write(nSourceCode, 6, "Throw New Exception(\"El procedimiento no retornó valor\")");
                        DataBaseClassWriter.Write(nSourceCode, 5, "End If");

                        DataBaseClassWriter.Write(nSourceCode, 4, "Catch ex As Exception");

                        DataBaseClassWriter.Write(nSourceCode, 5, "Throw New Exception(\"No fue posible ejecutar el procedimiento almacenado " + Objeto.Object_Name + ", \" + ex.Message, ex)");
                        DataBaseClassWriter.Write(nSourceCode, 4, "End Try");
                    }
                    else
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4, "Dim tableData As New " + strReturnType);
                        DataBaseClassWriter.Write(nSourceCode, 4, "Try");

                        DataBaseClassWriter.Write(nSourceCode, 5,
                                                  "MyBase.DBExecuteSp( CType(tableData, DataTable), nParameters)");

                        DataBaseClassWriter.Write(nSourceCode, 4, "Catch ex As Exception");

                        DataBaseClassWriter.Write(nSourceCode, 5,
                                                  "Throw New Exception(\"No fue posible ejecutar el procedimiento almacenado " +
                                                  Objeto.Object_Name + ", \" + ex.Message, ex)");
                        DataBaseClassWriter.Write(nSourceCode, 4, "End Try");
                        DataBaseClassWriter.Write(nSourceCode, 4, "Return tableData");
                    }

                    DataBaseClassWriter.Write(nSourceCode, 3, "End Function");
                    DataBaseClassWriter.Write(nSourceCode, 0, "");
                }

                if (retType == ReturnType.TablaTipada || retType == ReturnType.TablaTipada)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3, "'''<summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "'''Permite la ejecución del procedimiento almacenado " +
                                              Objeto.Object_Name + " y retorna los datos encontrados");
                    DataBaseClassWriter.Write(nSourceCode, 3, "'''</summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "Public Overloads Sub DBExecute(tableData As DataTable" +
                                              (opetarionParams == "" ? "" : ", " + opetarionParams) + ")");

                    DataBaseClassWriter.Write(nSourceCode, 4, "Dim nParameters As New List(Of Parameter)");

                    foreach (var par in nParameters)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4,
                                                  "nParameters.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                                  par.Type.ToString() + ", \"" + par.SpecificType + "\", n" +
                                                  par.Name.TrimStart('@') + ", " +
                                                  DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                                  par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                                  ", ParameterDirection." + par.Direction.ToString() + "))");
                    }

                    DataBaseClassWriter.Write(nSourceCode, 4, "Try");

                    DataBaseClassWriter.Write(nSourceCode, 5, "MyBase.DBExecuteSp(tableData, nParameters)");

                    DataBaseClassWriter.Write(nSourceCode, 4, "Catch ex As Exception");

                    DataBaseClassWriter.Write(nSourceCode, 5,
                                              "Throw New Exception(\"No fue posible ejecutar el procedimiento almacenado " +
                                              Objeto.Object_Name + ", \" + ex.Message, ex)");
                    DataBaseClassWriter.Write(nSourceCode, 4, "End Try");

                    DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                    DataBaseClassWriter.Write(nSourceCode, 0, "");
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 3, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Class");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDataTables(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                            XsdDataBase.TBL_ObjectRow[] tablas, bool IsMobile, bool UseFramework2)
        {
            int idMetodo = 0;

            foreach (var table in tablas)
            {
                DataBaseClassWriter.Write(nSourceCode, 2, "#Region \" " + table.Object_Name + "\"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                var nPrimaryKeys = nDataBaseMap.GetPrimaryKeys(table);
                var ObjetNameFormated = FormatCode.ToIdentifier(table.Object_Name);
                var nInColumns = nDataBaseMap.GetTableColumns(table);

                DataBaseClassWriter.Write(nSourceCode, 1, "'''<summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "'''Enumeración de las columnas de la tabla " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "'''</summary>");
                DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + ObjetNameFormated + "Enum");
                DataBaseClassWriter.Write(nSourceCode, 2, "Inherits ColumnEnum");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Public Shared ReadOnly " + FormatCode.ToIdentifier(par.Name) + " As New " +
                                              ObjetNameFormated + "Enum(\"" + par.Name + "\")");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "Sub New(ByVal nColumnName As String)");
                DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New(nColumnName)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 1, "End Class");

                DataBaseClassWriter.Write(nSourceCode, 1, "'''<summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "'''Colección columnas enumeradas de la tabla " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "'''</summary>");
                DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + ObjetNameFormated + "EnumList");
                DataBaseClassWriter.Write(nSourceCode, 2, "Inherits ColumnEnumList");
                DataBaseClassWriter.Write(nSourceCode, 2, "Public Sub New()");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Sub New(ByVal nColumn As " + ObjetNameFormated +
                                          "Enum, ByVal nAscendente As Boolean)");
                DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.Add(nColumn, nAscendente)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 1, "End Class");

                DataBaseClassWriter.Write(nSourceCode, 1, "'''<summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "'''Representa un DataTable tipado de la tabla " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "'''</summary>");
                DataBaseClassWriter.Write(nSourceCode, 1, "<Serializable()> _");
                DataBaseClassWriter.Write(nSourceCode, 1, "Partial Public Class " + ObjetNameFormated + "DataTable");

                if (UseFramework2)
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Inherits CMData.Utils.TypedTable(Of " + ObjetNameFormated + "Row)");
                else
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Inherits System.Data.TypedTableBase(Of " + ObjetNameFormated + "Row)");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Declaraciones \"");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Private column" + FormatCode.ToIdentifier(par.Name) +
                                              " As Global.System.Data.DataColumn");
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Propiedades \"");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Public ReadOnly Property " + par.Name +
                                              "Column() As Global.System.Data.DataColumn");

                    DataBaseClassWriter.Write(nSourceCode, 3, "Get");

                    DataBaseClassWriter.Write(nSourceCode, 4, "Return Me.column" + par.Name);
                    DataBaseClassWriter.Write(nSourceCode, 3, "End Get");
                    DataBaseClassWriter.Write(nSourceCode, 2, "End Property");
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                if (!IsMobile)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _");
                    DataBaseClassWriter.Write(nSourceCode, 2, "Global.System.ComponentModel.Browsable(False)> _");
                }
                else
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "Public ReadOnly Property Count() As Integer");

                DataBaseClassWriter.Write(nSourceCode, 3, "Get");

                DataBaseClassWriter.Write(nSourceCode, 4, "Return Me.Rows.Count");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Get");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Property");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Default Public ReadOnly Property Item(ByVal index As Integer) As " +
                                          ObjetNameFormated + "Row");

                DataBaseClassWriter.Write(nSourceCode, 3, "Get");

                DataBaseClassWriter.Write(nSourceCode, 4, "Return CType(Me.Rows(index), " + ObjetNameFormated + "Row)");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Get");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Property");

                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Constructores \"");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2, "Public Sub New()");
                DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New()");

                DataBaseClassWriter.Write(nSourceCode, 3, "Me.TableName = \"" + table.Object_Name + "\"");
                DataBaseClassWriter.Write(nSourceCode, 3, "Me.BeginInit()");
                DataBaseClassWriter.Write(nSourceCode, 3, "Me.InitClass()");
                DataBaseClassWriter.Write(nSourceCode, 3, "Me.EndInit()");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2, "Friend Sub New(ByVal table As Global.System.Data.DataTable)");
                DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New()");

                DataBaseClassWriter.Write(nSourceCode, 3, "Me.TableName = table.TableName");

                DataBaseClassWriter.Write(nSourceCode, 3, "If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then");

                DataBaseClassWriter.Write(nSourceCode, 4, "Me.CaseSensitive = table.CaseSensitive");
                DataBaseClassWriter.Write(nSourceCode, 3, "End If");

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then");

                DataBaseClassWriter.Write(nSourceCode, 4, "Me.Locale = table.Locale");
                DataBaseClassWriter.Write(nSourceCode, 3, "End If");

                DataBaseClassWriter.Write(nSourceCode, 3, "If (table.Namespace <> table.DataSet.Namespace) Then");

                DataBaseClassWriter.Write(nSourceCode, 4, "Me.Namespace = table.Namespace");
                DataBaseClassWriter.Write(nSourceCode, 3, "End If");

                DataBaseClassWriter.Write(nSourceCode, 3, "Me.Prefix = table.Prefix");
                DataBaseClassWriter.Write(nSourceCode, 3, "Me.MinimumCapacity = table.MinimumCapacity");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

                if (!IsMobile)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)");
                    DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New(info, context)");

                    DataBaseClassWriter.Write(nSourceCode, 3, "Me.InitVars()");
                    DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
                }
                DataBaseClassWriter.Write(nSourceCode, 2, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Metodos \"");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Sub Remove" + ObjetNameFormated + "Row(ByVal row As " +
                                          ObjetNameFormated + "Row)");

                DataBaseClassWriter.Write(nSourceCode, 3, "Me.Rows.Remove(row)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Overloads Sub Add" + ObjetNameFormated + "Row(ByVal row As " +
                                          ObjetNameFormated + "Row)");

                DataBaseClassWriter.Write(nSourceCode, 3, "Me.Rows.Add(row)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2, "Friend Sub InitVars()");


                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "Me.column" + FormatCode.ToIdentifier(par.Name) + " = MyBase.Columns(\"" +
                                              par.Name + "\")");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2, "Private Sub InitClass()");


                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "Me.column" + FormatCode.ToIdentifier(par.Name) +
                                              " = New Global.System.Data.DataColumn(\"" + par.Name + "\", GetType(" +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB,
                                                                                           false) +
                                              "), Nothing, Global.System.Data.MappingType.Element)");

                    if (par.MaxLength > 0 && CMData.DataBase.DataBase.IsStringType(par) && table.Generic_Type != "View")
                        DataBaseClassWriter.Write(nSourceCode, 3,
                                                  "Me.column" + FormatCode.ToIdentifier(par.Name) + ".MaxLength = " +
                                                  par.MaxLength);

                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "MyBase.Columns.Add(Me.column" + FormatCode.ToIdentifier(par.Name) + ")");
                }

                var strLine = "";
                if (table.Generic_Type != "View")
                {
                    if (nPrimaryKeys.Count > 0)
                    {
                        strLine = "";
                        foreach (var par in nPrimaryKeys)
                        {
                            if (strLine != "")
                                strLine += ", ";

                            strLine += "Me.column" + par.Name;
                        }

                        DataBaseClassWriter.Write(nSourceCode, 3,
                                                  "Me.Constraints.Add(New Global.System.Data.UniqueConstraint(\"" +
                                                  table.Object_Name + "Key1\", New Global.System.Data.DataColumn() { " +
                                                  strLine + "}, True))");
                    }

                    foreach (var par in nInColumns)
                    {
                        if (!par.IsNullable)
                            DataBaseClassWriter.Write(nSourceCode, 3,
                                                      "Me.column" + FormatCode.ToIdentifier(par.Name) +
                                                      ".AllowDBNull = False");
                    }
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Funciones \"");

                var strLine2 = "";
                if (nPrimaryKeys.Count > 0 && table.Generic_Type != "View")
                {
                    strLine = "";
                    foreach (var par in nPrimaryKeys)
                    {
                        strLine += par.Name;
                    }

                    var strFunctionName = strLine;

                    if (strFunctionName.Length > 500)
                    {
                        idMetodo++;
                        strFunctionName = strFunctionName.Substring(0, 500) + idMetodo.ToString();
                    }

                    strLine2 = "";
                    foreach (var par in nPrimaryKeys)
                    {
                        if (strLine2 != "")
                            strLine2 += ", ";

                        strLine2 += "ByVal n" + par.Name + " As " +
                                    DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, false);
                    }

                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Public Function FindBy" + strFunctionName + "(" + strLine2 + ") As " +
                                              ObjetNameFormated + "Row");


                    strLine = "";
                    foreach (var par in nPrimaryKeys)
                    {
                        if (strLine != "")
                            strLine += ", ";

                        strLine += "n" + par.Name;
                    }

                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "Return CType(Me.Rows.Find(New Object() {" + strLine + "}), " +
                                              ObjetNameFormated + "Row)");
                    DataBaseClassWriter.Write(nSourceCode, 2, "End Function");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Function New" + ObjetNameFormated + "Row() As " + ObjetNameFormated +
                                          "Row");

                DataBaseClassWriter.Write(nSourceCode, 3, "Return CType(Me.NewRow, " + ObjetNameFormated + "Row)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");

                strLine = "";
                strLine2 = "";

                foreach (var par in nInColumns)
                {
                    if (strLine != "")
                        strLine += ", ";

                    if (strLine2 != "")
                        strLine2 += ", ";

                    strLine += "ByVal n" + par.Name + " As " +
                               DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, par.IsNullable);
                    strLine2 += "n" + par.Name;
                }

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Overloads Function Add" + ObjetNameFormated + "Row(" + strLine +
                                          ") As " + ObjetNameFormated + "Row");

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Dim row" + ObjetNameFormated + "Row As " + ObjetNameFormated +
                                          "Row = CType(Me.NewRow, " + ObjetNameFormated + "Row)");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Dim columnValuesArray() As Object = New Object() {" + strLine2 + "}");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "row" + ObjetNameFormated + "Row.ItemArray = columnValuesArray");
                DataBaseClassWriter.Write(nSourceCode, 3, "Me.Rows.Add(row" + ObjetNameFormated + "Row)");
                DataBaseClassWriter.Write(nSourceCode, 3, "Return row" + ObjetNameFormated + "Row");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Overrides Function Clone() As Global.System.Data.DataTable");

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Dim cln As " + ObjetNameFormated + "DataTable = CType(MyBase.Clone, " +
                                          ObjetNameFormated + "DataTable)");
                DataBaseClassWriter.Write(nSourceCode, 3, "cln.InitVars()");
                DataBaseClassWriter.Write(nSourceCode, 3, "Return cln");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow");

                DataBaseClassWriter.Write(nSourceCode, 3, "Return New " + ObjetNameFormated + "Row(builder)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Protected Overrides Function GetRowType() As Global.System.Type");

                DataBaseClassWriter.Write(nSourceCode, 3, "Return GetType(" + ObjetNameFormated + "Row)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Protected Overrides Function CreateInstance() As Global.System.Data.DataTable");

                DataBaseClassWriter.Write(nSourceCode, 3, "Return New " + ObjetNameFormated + "DataTable");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                // Objeto complejo
                var objectName = FormatCode.ToIdentifier(table.Object_Name);
                var objectXmlName = objectName + "Type";

                DataBaseClassWriter.Write(nSourceCode, 2, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "''' Retorna una lista de filas de tipo " + table.Object_Name +
                                          " tipados para serializacion en XML");
                DataBaseClassWriter.Write(nSourceCode, 2, "''' </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "''' <returns></returns>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Function ToXmlList() As List(Of " + objectXmlName + ")");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Return XmlList(Of " + objectXmlName + ").ConvertToXmlList(Me)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                // Objeto simple
                objectXmlName = objectName + "SimpleType";

                DataBaseClassWriter.Write(nSourceCode, 2, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "''' Retorna una lista de filas de tipo " + table.Object_Name +
                                          " tipados para serializacion en XML");
                DataBaseClassWriter.Write(nSourceCode, 2, "''' </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "''' <returns></returns>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Function ToSimpleXmlList() As List(Of " + objectXmlName + ")");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Return XmlList(Of " + objectXmlName + ").ConvertToXmlList(Me)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");


                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 1, "End Class");

                DataBaseClassWriter.Write(nSourceCode, 1, "'''<summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "'''Representa un DataRow tipado de la tabla " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "'''</summary>");
                DataBaseClassWriter.Write(nSourceCode, 1, "<Serializable()> _");
                DataBaseClassWriter.Write(nSourceCode, 1, "Partial Public Class " + ObjetNameFormated + "Row");
                DataBaseClassWriter.Write(nSourceCode, 2, "Inherits Global.System.Data.DataRow");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Declaraciones \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Private table" + ObjetNameFormated + " As " + ObjetNameFormated + "DataTable");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Propiedades \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Public Property [" + par.Name + "]() As " +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB,
                                                                                           false));

                    DataBaseClassWriter.Write(nSourceCode, 3, "Get");

                    DataBaseClassWriter.Write(nSourceCode, 4, "Try");

                    DataBaseClassWriter.Write(nSourceCode, 5,
                                              "Return CType(Me(Me.table" + ObjetNameFormated + "." + par.Name +
                                              "Column), " +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB,
                                                                                           false) + " )");

                    DataBaseClassWriter.Write(nSourceCode, 4, "Catch e As Global.System.InvalidCastException");

                    DataBaseClassWriter.Write(nSourceCode, 5,
                                              "Throw New Global.System.Data.StrongTypingException(\"El valor de la columna '" +
                                              par.Name + "' de la tabla '" + ObjetNameFormated + "' es DBNull.\", e)");
                    DataBaseClassWriter.Write(nSourceCode, 4, "End Try");

                    DataBaseClassWriter.Write(nSourceCode, 3, "End Get");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "Set(ByVal value As " +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB,
                                                                                           false) + ")");

                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "Me(Me.table" + ObjetNameFormated + "." + par.Name + "Column) = value");
                    DataBaseClassWriter.Write(nSourceCode, 3, "End Set");
                    DataBaseClassWriter.Write(nSourceCode, 2, "End Property");
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Constructores \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)");
                DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New(rb)");

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Me.table" + ObjetNameFormated + " = CType(Me.Table, " + ObjetNameFormated +
                                          "DataTable)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Metodos \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                foreach (var par in nInColumns)
                {
                    if (par.IsNullable)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 2,
                                                  "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                        DataBaseClassWriter.Write(nSourceCode, 2, "Public Sub Set" + par.Name + "Null()");

                        DataBaseClassWriter.Write(nSourceCode, 3,
                                                  "Me(Me.table" + ObjetNameFormated + "." + par.Name +
                                                  "Column) = Global.System.Convert.DBNull");
                        DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
                    }
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#Region \" Funciones \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                foreach (var par in nInColumns)
                {
                    if (par.IsNullable)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 2,
                                                  "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                        DataBaseClassWriter.Write(nSourceCode, 2, "Public Function Is" + par.Name + "Null() As Boolean");

                        DataBaseClassWriter.Write(nSourceCode, 3,
                                                  "Return Me.IsNull(Me.table" + ObjetNameFormated + "." + par.Name +
                                                  "Column)");
                        DataBaseClassWriter.Write(nSourceCode, 2, "End Function");
                    }
                }

                // Tipo complejo
                objectName = FormatCode.ToIdentifier(table.Object_Name);
                objectXmlName = objectName + "Type";

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Function To" + objectXmlName + "() As " + objectXmlName + "");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Return XmlList(Of " + objectXmlName + ").ConvertToXmlBasicType(Me)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Tipo simple
                objectName = FormatCode.ToIdentifier(table.Object_Name);
                objectXmlName = objectName + "SimpleType";

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Public Function To" + objectXmlName + "() As " + objectXmlName + "");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Return XmlList(Of " + objectXmlName + ").ConvertToXmlBasicType(Me)");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 1, "End Class");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Entidad que representa un Row para XML
                // Tipo Complejo
                objectXmlName = objectName + "Type";

                nInColumns = nDataBaseMap.GetTableColumns(table);
                DataBaseClassWriter.Write(nSourceCode, 1, "<Serializable> _ ");
                DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + objectXmlName);
                DataBaseClassWriter.Write(nSourceCode, 2, "Inherits XmlBase");
                DataBaseClassWriter.Write(nSourceCode, 2, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "    Public Sub New()");
                DataBaseClassWriter.Write(nSourceCode, 2, "    End Sub");
                DataBaseClassWriter.Write(nSourceCode, 2, "");
                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Public " + par.Name + " As " +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB,
                                                                                           true));
                }
                DataBaseClassWriter.Write(nSourceCode, 2, "");
                DataBaseClassWriter.Write(nSourceCode, 1, "End Class");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Tipo simple
                objectXmlName = objectName + "SimpleType";

                nInColumns = nDataBaseMap.GetTableColumns(table);
                DataBaseClassWriter.Write(nSourceCode, 1, "<Serializable> _ ");
                DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + objectXmlName);
                DataBaseClassWriter.Write(nSourceCode, 2, "Inherits XmlBase");
                DataBaseClassWriter.Write(nSourceCode, 2, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "    Public Sub New()");
                DataBaseClassWriter.Write(nSourceCode, 2, "    End Sub");
                DataBaseClassWriter.Write(nSourceCode, 2, "");
                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Public " + par.Name + " As " +
                                              DataBaseClassWriter.getLanguajeStringType(par.Type, LanguajeType.VB));
                }
                DataBaseClassWriter.Write(nSourceCode, 2, "");
                DataBaseClassWriter.Write(nSourceCode, 1, "End Class");


                DataBaseClassWriter.Write(nSourceCode, 2, "#End Region");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDatasets(ref StringBuilder nSourceCode, DataTable schemas, string nCatalog,
                                          XsdDataBase nDataBaseMap, int nidConnection, bool IsMobile)
        {
            DataBaseClassWriter.Write(nSourceCode, 1, "#Region \" Datasets \"");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                var SchemaNameDataSet = SchemaConfig.Schema_Alias + "DataSet";

                if (!IsMobile)
                {
                    DataBaseClassWriter.Write(nSourceCode, 1, "<Global.System.Serializable(), _");
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "Global.System.ComponentModel.DesignerCategoryAttribute(\"code\"), _");
                    DataBaseClassWriter.Write(nSourceCode, 1, "Global.System.ComponentModel.ToolboxItem(True), _");
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "Global.System.Xml.Serialization.XmlSchemaProviderAttribute(\"GetTypedDataSetSchema\"), _");
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "Global.System.Xml.Serialization.XmlRootAttribute(\"" + SchemaNameDataSet +
                                              "\"), _");
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "Global.System.ComponentModel.Design.HelpKeywordAttribute(\"vs.data.DataSet\")> _");
                }
                else
                {
                    DataBaseClassWriter.Write(nSourceCode, 1, "<Global.System.Serializable(), _");
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "Global.System.ComponentModel.DesignerCategoryAttribute(\"code\"), _");
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "Global.System.Xml.Serialization.XmlSchemaProviderAttribute(\"GetTypedDataSetSchema\"), _");
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "Global.System.Xml.Serialization.XmlRootAttribute(\"" + SchemaNameDataSet +
                                              "\")> _");
                }

                DataBaseClassWriter.Write(nSourceCode, 1, "Public Class " + SchemaNameDataSet);
                DataBaseClassWriter.Write(nSourceCode, 2, "Inherits DataSet");
                DataBaseClassWriter.Write(nSourceCode, 1, "");


                var sqlFilter = "(Generic_Type = 'Table' OR Generic_Type = 'View') AND Catalog_Name = '" + nCatalog +
                                "' AND Schema_Name = '" + SchemaConfig.Schema_Name + "' AND Selected = 1";
                var tablas = (XsdDataBase.TBL_ObjectRow[]) (nDataBaseMap.TBL_Object.Select(sqlFilter));

                DataBaseClassWriter.Write(nSourceCode, 1, "#Region \" Declaraciones \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                foreach (var tabla in tablas)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Private table" + FormatCode.ToIdentifier(tabla.Object_Name) +
                                              " As Schema" + SchemaConfig.Schema_Alias + "." +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + "DataTable");
                }
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 1, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 1, "#Region \" Propiedades \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                foreach (var tabla in tablas)
                {
                    if (!IsMobile)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 2,
                                                  "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _");
                        DataBaseClassWriter.Write(nSourceCode, 2, "Global.System.ComponentModel.Browsable(False), _");
                        DataBaseClassWriter.Write(nSourceCode, 2,
                                                  "Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _");
                    }
                    else
                    {
                        DataBaseClassWriter.Write(nSourceCode, 2,
                                                  "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    }

                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Public ReadOnly Property " + FormatCode.ToIdentifier(tabla.Object_Name) +
                                              "() As Schema" + SchemaConfig.Schema_Alias + "." +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + "DataTable");

                    DataBaseClassWriter.Write(nSourceCode, 3, "Get");

                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "Return Me.table" + FormatCode.ToIdentifier(tabla.Object_Name));
                    DataBaseClassWriter.Write(nSourceCode, 3, "End Get");
                    DataBaseClassWriter.Write(nSourceCode, 2, "End Property");
                    DataBaseClassWriter.Write(nSourceCode, 1, "");
                }
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 1, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 1, "#Region \" Metodos \"");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "Public Sub New()");
                DataBaseClassWriter.Write(nSourceCode, 3, "MyBase.New()");
                DataBaseClassWriter.Write(nSourceCode, 1, "");

                foreach (var tabla in tablas)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "If ((Me.Tables(\"" + tabla.Object_Name + "\")) Is Nothing) Then");

                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "Me.table" + FormatCode.ToIdentifier(tabla.Object_Name) + " = New Schema" +
                                              SchemaConfig.Schema_Alias + "." +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + "DataTable");
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "MyBase.Tables.Add(Me.table" + FormatCode.ToIdentifier(tabla.Object_Name) +
                                              ")");
                    DataBaseClassWriter.Write(nSourceCode, 3, "End If");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 1, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Protected Overrides Function ShouldSerializeTables() As Boolean");

                DataBaseClassWriter.Write(nSourceCode, 3, "Return False");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");
                DataBaseClassWriter.Write(nSourceCode, 1, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "Protected Overrides Function ShouldSerializeRelations() As Boolean");

                DataBaseClassWriter.Write(nSourceCode, 3, "Return False");
                DataBaseClassWriter.Write(nSourceCode, 2, "End Function");
                DataBaseClassWriter.Write(nSourceCode, 1, "");

                foreach (var tabla in tablas)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "Private Function ShouldSerialize" +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + "() As Boolean");

                    DataBaseClassWriter.Write(nSourceCode, 3, "Return False");
                    DataBaseClassWriter.Write(nSourceCode, 2, "End Function");
                    DataBaseClassWriter.Write(nSourceCode, 1, "");
                }

                DataBaseClassWriter.Write(nSourceCode, 1, "#End Region");

                DataBaseClassWriter.Write(nSourceCode, 1, "");

                DataBaseClassWriter.Write(nSourceCode, 1, "End Class");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            } // Fin de esquemas

            DataBaseClassWriter.Write(nSourceCode, 1, "#End Region");
        }

        #endregion

        #region Sentecias de acceso

        private static void WriteDBInsert(ref StringBuilder nSourceCode, List<Parameter> nTableColumns)
        {
            var opetarionParams = "";

            foreach (var par in nTableColumns)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, par.IsNullable);
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' Inserta un nuevo registro a la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3, "Public Overloads Sub DBInsert(" + opetarionParams + ") ");

            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nInParams As New List(Of Parameter)");

            foreach (var par in nTableColumns)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nInParams.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBInsert(nInParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBInsertTyped(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                               string nObjectName)
        {
            var objectXmlName = FormatCode.ToIdentifier(nObjectName) + "Type";

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' Inserta un nuevo registro a la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Sub DBInsert(ByVal n" + objectXmlName + " As " + objectXmlName +
                                      ")");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nInParams As New List(Of Parameter)");

            foreach (var par in nTableColumns)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nInParams.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + objectXmlName +
                                          "." + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBInsert(nInParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBNextId(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                          Parameter nKeyParam, bool nMultiKeyParam)
        {
            if (nKeyParam != null && CMData.DataBase.DataBase.IsNumericType(nKeyParam))
            {
                var paramKeyType = DataBaseClassWriter.GetApplicationStringType(nKeyParam.Type, LanguajeType.VB);
                var opetarionParams = "";
                string FunctionName = nMultiKeyParam ? "DBNextId_for_" + nKeyParam.Name : "DBNextId";

                foreach (var par in nPrimaryKeys)
                {
                    if (par.Name != nKeyParam.Name)
                    {
                        if (opetarionParams != "") opetarionParams += ", ";
                        opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                          DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB,
                                                                                       par.IsNullable);
                    }
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "''' Calcula el siguiente identificador para un nuevo registro de la tabla");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
                DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");


                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Public Overloads Function " + FunctionName + "(" + opetarionParams + ") As " +
                                          paramKeyType);

                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nInParams As New List(Of Parameter)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nIdColumn As String = \"" + nKeyParam.Name + "\"");

                foreach (var par in nPrimaryKeys)
                {
                    if (par.Name != nKeyParam.Name)
                        DataBaseClassWriter.Write(nSourceCode, 4,
                                                  "nInParams.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                                  par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name +
                                                  ", " + DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) +
                                                  ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                                  ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "Return CType(MyBase.DBNextId(nInParams, nIdColumn), " + paramKeyType + ")");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Function ");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBSaveTableAutoNextId(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                                       List<Parameter> nPrimaryKeys, Parameter nKeyParam,
                                                       bool nMultiKeyParam)
        {
            if (nPrimaryKeys.Count > 0 && nKeyParam != null && CMData.DataBase.DataBase.IsNumericType(nKeyParam))
            {
                string FunctionName = nMultiKeyParam
                                          ? "DBSaveTableAutoNextId_for_" + nKeyParam.Name
                                          : "DBSaveTableAutoNextId";

                DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "''' Actualiza los registros de la tabla de acuerdo a los estados de cada registro");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");

                DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Public Overloads Sub " + FunctionName + "(ByVal nDataTable As DataTable)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nColumnsMapping As New List(Of Parameter)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nPrimaryKeysMapping As New List(Of Parameter)");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nColumnsMapping.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", Nothing, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nPrimaryKeysMapping.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", Nothing, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "MyBase.DBSaveTableAutoNextId(nDataTable, nColumnsMapping , nPrimaryKeysMapping , \"" +
                                          nKeyParam.Name + "\")");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBSaveTableAutoNextIdTyped(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                                            List<Parameter> nPrimaryKeys, Parameter nKeyParam,
                                                            string ObjetNameFormated, bool nMultiKeyParam)
        {
            if (nPrimaryKeys.Count > 0 && nKeyParam != null && CMData.DataBase.DataBase.IsNumericType(nKeyParam))
            {
                string FunctionName = nMultiKeyParam
                                          ? "DBSaveTableAutoNextId_for_" + nKeyParam.Name
                                          : "DBSaveTableAutoNextId";

                DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "''' Actualiza los registros de la tabla de acuerdo a los estados de cada registro");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");

                DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Public Overloads Sub " + FunctionName + "(ByVal nDataTable As " +
                                          ObjetNameFormated + "DataTable)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nColumnsMapping As New List(Of Parameter)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nPrimaryKeysMapping As New List(Of Parameter)");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nColumnsMapping.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", Nothing, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nPrimaryKeysMapping.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", Nothing, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "MyBase.DBSaveTableAutoNextId(nDataTable, nColumnsMapping , nPrimaryKeysMapping , \"" +
                                          nKeyParam.Name + "\")");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBUpdate(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                          List<Parameter> nPrimaryKeys)
        {
            if (nPrimaryKeys.Count > 0)
            {
                DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' Actualiza un registro de la tabla");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");

                var opetarionParams = "";

                foreach (var par in nTableColumns)
                {
                    if (opetarionParams != "") opetarionParams += ", ";
                    opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
                }

                foreach (var par in nPrimaryKeys)
                {
                    if (opetarionParams != "") opetarionParams += ", ";
                    opetarionParams = opetarionParams + "ByVal nOriginal_" + par.Name + " As " +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 3, "Public Overloads Sub DBUpdate(" + opetarionParams + ")");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nInParams As New List(Of Parameter)");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nInParams.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name +
                                              ", " + DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) +
                                              ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nKeys.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", nOriginal_" +
                                              par.Name + ", " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBUpdate(nKeys , nInParams)");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBUpdateTyped(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                               List<Parameter> nPrimaryKeys, string nObjectName)
        {
            if (nPrimaryKeys.Count > 0)
            {
                var objectXmlName = FormatCode.ToIdentifier(nObjectName) + "Type";

                DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' Actualiza un registro de la tabla");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");

                var opetarionParams = "";

                foreach (var par in nPrimaryKeys)
                {
                    if (opetarionParams != "") opetarionParams += ", ";
                    opetarionParams = opetarionParams + " ByVal nOriginal_" + par.Name + " As " +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Public Overloads Sub DBUpdate(ByVal n" + objectXmlName + " As " +
                                          objectXmlName + ", " + opetarionParams + ")");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nInParams As New List(Of Parameter)");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nInParams.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + objectXmlName +
                                              "." + par.Name + ", " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }
                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", nOriginal_" +
                                              par.Name + ", " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBUpdate(nKeys , nInParams)");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBSaveTable(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                             List<Parameter> nPrimaryKeys)
        {
            if (nPrimaryKeys.Count > 0)
            {
                DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "''' Actualiza los registros de la tabla de acuerdo a los estados de cada registro");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");

                DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Public Overloads Sub DBSaveTable(ByVal nDataTable As DataTable)");

                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nColumnsMapping As New List(Of Parameter)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nPrimaryKeysMapping As New List(Of Parameter)");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nColumnsMapping.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", Nothing, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nPrimaryKeysMapping.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", Nothing, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "MyBase.DBSaveTable(nDataTable, nColumnsMapping, nPrimaryKeysMapping)");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBSaveTableTyped(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                                  List<Parameter> nPrimaryKeys, string ObjetNameFormated)
        {
            if (nPrimaryKeys.Count > 0)
            {
                DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "''' Actualiza los registros de la tabla de acuerdo a los estados de cada registro");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");

                DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "Public Overloads Sub DBSaveTable(ByVal nDataTable As " + ObjetNameFormated +
                                          "DataTable)");

                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nColumnsMapping As New List(Of Parameter)");
                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nPrimaryKeysMapping As New List(Of Parameter)");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nColumnsMapping.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", Nothing, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nPrimaryKeysMapping.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", Nothing, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "MyBase.DBSaveTable(nDataTable, nColumnsMapping, nPrimaryKeysMapping)");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBDelete(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys)
        {
            if (nPrimaryKeys.Count > 0)
            {
                DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' Actualiza un registro de la tabla");
                DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");

                var opetarionParams = "";

                foreach (var par in nPrimaryKeys)
                {
                    if (opetarionParams != "") opetarionParams += ", ";
                    opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true) + "";
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
                DataBaseClassWriter.Write(nSourceCode, 3, "Public Overloads Sub DBDelete(" + opetarionParams + ")");

                DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nKeys.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name +
                                              ", " + DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) +
                                              ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "))");
                }

                DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBDelete(nKeys)");
                DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBGet(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                       string ObjectNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' Retorna registros de la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Function DBGet(" + opetarionParams + ") As " +
                                      ObjectNameFormated + "DataTable");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(New Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nDataTable As New " + ObjectNameFormated + "DataTable");
            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nKeys)");
            DataBaseClassWriter.Write(nSourceCode, 4, "Return nDataTable");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Function");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBGetOrderBy(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                              string ObjectNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' Retorna registros de la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Function DBGet(" + opetarionParams +
                                      (opetarionParams == "" ? "" : ", ") +
                                      "ByVal nMaxRows As Integer, ByVal nOrderByParams As " + ObjectNameFormated +
                                      "EnumList) As " + ObjectNameFormated + "DataTable");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(New Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nDataTable As New " + ObjectNameFormated + "DataTable");
            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nKeys, nMaxRows, nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 4, "Return nDataTable");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Function");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFill(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' Pobla registros en la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Sub DBFill(ByVal nDataTable As DataTable" +
                                      (opetarionParams == "" ? " " : ", ") + opetarionParams + ")");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(New Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nKeys)");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillOrderBy(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                               string ObjectNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' Pobla registros en la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Sub DBFill(ByVal nDataTable As DataTable" +
                                      (opetarionParams == "" ? " " : ", ") + opetarionParams +
                                      ", ByVal nMaxRows As Integer, ByVal nOrderByParams As " + ObjectNameFormated +
                                      "EnumList)");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(New Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nKeys, nMaxRows, nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillTyped(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                             string ObjectNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' Pobla registros en la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Sub DBFill(ByVal nDataTable As " + ObjectNameFormated +
                                      "DataTable" + (opetarionParams == "" ? " " : ", ") + opetarionParams + ")");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(New Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nKeys)");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillOrderByTyped(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                                    string ObjectNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true);
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' Pobla registros en la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Sub DBFill(ByVal nDataTable As " + ObjectNameFormated +
                                      "DataTable" + (opetarionParams == "" ? " " : ", ") + opetarionParams +
                                      ", ByVal nMaxRows As Integer, ByVal nOrderByParams As " + ObjectNameFormated +
                                      "EnumList)");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nKeys As New List(Of Parameter)");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(New Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nKeys, nMaxRows, nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFindBy(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                          XsdDataBase.TBL_ObjectRow tabla, ref int idMetodo,
                                          XsdDataBase.TBL_FilterRow filtro, string ObjectNameFormated)
        {
            var nFilterParam = nDataBaseMap.GetFilterColumns(filtro, tabla.id_Object);
            var opetarionParams = "";
            var strLine = "";

            foreach (var par in nFilterParam)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true) + "";
                strLine += " " + par.Name;
            }

            var FunctionName = strLine.Replace(" ", "");

            if (FunctionName.Length > 500)
            {
                idMetodo++;
                FunctionName = FunctionName.Substring(0, 500) + idMetodo.ToString();
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "''' Retorna registros de la tabla " + tabla.Object_Name + ", filtrando por" +
                                      strLine);
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Function DBFindBy" + FunctionName + "(" + opetarionParams +
                                      ") As " + ObjectNameFormated + "DataTable");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nFilters As New List(Of Parameter)");

            foreach (var par in nFilterParam)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nFilters.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nDataTable As New " + ObjectNameFormated + "DataTable");
            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nFilters)");
            DataBaseClassWriter.Write(nSourceCode, 4, "Return nDataTable");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Function");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFindByOrderBy(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                                 XsdDataBase.TBL_ObjectRow tabla, ref int idMetodo,
                                                 XsdDataBase.TBL_FilterRow filtro, string ObjetNameFormated)
        {
            var nFilterParam = nDataBaseMap.GetFilterColumns(filtro, tabla.id_Object);
            var opetarionParams = "";
            var strLine = "";

            foreach (var par in nFilterParam)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true) + "";
                strLine += " " + par.Name;
            }

            var FunctionName = strLine.Replace(" ", "");

            if (FunctionName.Length > 500)
            {
                idMetodo++;
                FunctionName = FunctionName.Substring(0, 500) + idMetodo.ToString();
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "''' Retorna registros de la tabla " + tabla.Object_Name + ", filtrando por" +
                                      strLine);
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Function DBFindBy" + FunctionName + "(" + opetarionParams +
                                      (opetarionParams == "" ? "" : ", ") +
                                      "ByVal nMaxRows As Integer, ByVal nOrderByParams As " + ObjetNameFormated +
                                      "EnumList) As " + ObjetNameFormated + "DataTable");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nFilters As New List(Of Parameter)");
            foreach (var par in nFilterParam)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nFilters.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nDataTable As New " + ObjetNameFormated + "DataTable");
            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nFilters, nMaxRows, nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 4, "Return nDataTable");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Function");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillBy(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                          XsdDataBase.TBL_ObjectRow tabla, ref int idMetodo,
                                          XsdDataBase.TBL_FilterRow filtro)
        {
            var nFilterParam = nDataBaseMap.GetFilterColumns(filtro, tabla.id_Object);

            var opetarionParams = "";
            var strLine = "";

            foreach (var par in nFilterParam)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true) + "";
                strLine += " " + par.Name;
            }

            var FunctionName = strLine.Replace(" ", "");

            if (FunctionName.Length > 500)
            {
                idMetodo++;
                FunctionName = FunctionName.Substring(0, 500) + idMetodo;
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "''' Pobla registros en la tabla " + tabla.Object_Name + ", filtrando por" +
                                      strLine);
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Sub DBFillBy" + FunctionName +
                                      "(ByVal nDataTable As DataTable, " + opetarionParams + ")");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nFilters As New List(Of Parameter)");

            foreach (var par in nFilterParam)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nFilters.Add(New Parameter(\"" + par.Name + "\", DbType." + par.Type + ", \"" +
                                          par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nFilters)");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillByOrderBy(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                                 XsdDataBase.TBL_ObjectRow tabla, ref int idMetodo,
                                                 XsdDataBase.TBL_FilterRow filtro, string ObjetNameFormated)
        {
            var nFilterParam = nDataBaseMap.GetFilterColumns(filtro, tabla.id_Object);

            var opetarionParams = "";
            var strLine = "";

            foreach (var par in nFilterParam)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams + "ByVal n" + par.Name + " As " +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.VB, true) + "";
                strLine += " " + par.Name;
            }

            var FunctionName = strLine.Replace(" ", "");

            if (FunctionName.Length > 500)
            {
                idMetodo++;
                FunctionName = FunctionName.Substring(0, 500) + idMetodo.ToString();
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "''' <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "''' Pobla registros en la tabla " + tabla.Object_Name + ", filtrando por" +
                                      strLine);
            DataBaseClassWriter.Write(nSourceCode, 3, "''' </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "Public Overloads Sub DBFillBy" + FunctionName +
                                      "(ByVal nDataTable As DataTable, " + opetarionParams +
                                      ", ByVal nMaxRows As Integer, ByVal nOrderByParams As " + ObjetNameFormated +
                                      "EnumList)");
            DataBaseClassWriter.Write(nSourceCode, 4, "Dim nFilters As New List(Of Parameter)");

            foreach (var par in nFilterParam)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nFilters.Add(New Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.VB) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "))");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "MyBase.DBFill(nDataTable, nFilters, nMaxRows, nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "End Sub");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        #endregion
    }
}