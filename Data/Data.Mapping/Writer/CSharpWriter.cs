using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using CM.Tools.Misellaneous;
using CMData.Schemas;


namespace Data.Mapping.Writer
{
    internal static class CSharpWriter
    {
        #region Funciones

        public static StringBuilder WriteDataBaseManager(XsdDataBase.TBL_ConnectionRow nConnection,
                                                         string nCatalogClassName, string nNamespaceMap)
        {
            var SourceCode = new StringBuilder();

            // Escribir el encabezado
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "//------------------------------------------------------------------------------");
            DataBaseClassWriter.Write(SourceCode, 0, "// <auto-generated>");
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "//   Este código fue generado automaticamente por una herramienta de propiedad de CargoMaster");
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "//   Versión del motor en tiempo de ejecución: " + Program.AssemblyVersion);
            DataBaseClassWriter.Write(SourceCode, 0, "// </auto-generated>");
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "//------------------------------------------------------------------------------");
            DataBaseClassWriter.Write(SourceCode, 0, "// Conexion: " + nConnection.Connection_Name);
            DataBaseClassWriter.Write(SourceCode, 0, "");

            // Escribir el namespace
            DataBaseClassWriter.Write(SourceCode, 0,
                                      "namespace " + nNamespaceMap +
                                      (nNamespaceMap == "" ? nCatalogClassName : "." + nCatalogClassName));
            DataBaseClassWriter.Write(SourceCode, 0, "{");

            // Escribir inicio de la clase DBManager
            DataBaseClassWriter.Write(SourceCode, 1, "public partial class " + nCatalogClassName + "DBManager");
            DataBaseClassWriter.Write(SourceCode, 1, "{");

            DataBaseClassWriter.Write(SourceCode, 1, "}");
            DataBaseClassWriter.Write(SourceCode, 0, "}");

            return SourceCode;
        }

        public static StringBuilder WriteDataBaseManagerDesigner(XsdDataBase.TBL_ConnectionRow nConnection,
                                                                 string nCatalogClassName, string nCatalog,
                                                                 string nNamespaceMap, XsdDataBase nDataBaseMap,
                                                                 bool IsMobile, bool UseFramework2)
        {
            var SourceCode = new StringBuilder();
            var schemas =
                CMData.DataBase.DataBase.GetDistinctRows(
                    nDataBaseMap.TBL_Object.Select("fk_Connection = " + nConnection.id_Connection +
                                                   " AND Catalog_Name = '" + nCatalog + "' AND Selected = 1"),
                    "Schema_Name");

            //Encabezado del archivo
            WriteBeginSource(ref SourceCode, nConnection.Connection_Name, nNamespaceMap, nCatalogClassName);

            // Escribir la clase
            WriteDatabaseManagerClass(ref SourceCode, nDataBaseMap, nConnection.id_Connection, nCatalogClassName,
                                      schemas, nCatalog);

            // Escribir enumeración de esquemas
            DataBaseClassWriter.Write(SourceCode, 0, "");
            DataBaseClassWriter.Write(SourceCode, 1, "#region Enumeraciones del DBManager");
            DataBaseClassWriter.Write(SourceCode, 0, "");
            WriteSchemaEnum(ref SourceCode, nDataBaseMap, nConnection.id_Connection, nCatalogClassName, nCatalog,
                            schemas);
            DataBaseClassWriter.Write(SourceCode, 0, "");
            DataBaseClassWriter.Write(SourceCode, 1, "#endregion");
            DataBaseClassWriter.Write(SourceCode, 0, "");

            // Escribir las clases de los esquemas
            WriteSchemaManager(ref SourceCode, nCatalog, schemas, nDataBaseMap,
                               nConnection.id_Connection, IsMobile, UseFramework2);

            // Escribir los datasets
            WriteDatasets(ref SourceCode, schemas, nCatalog, nDataBaseMap, nConnection.id_Connection, IsMobile);

            // Final del archivo
            WriteEndSource(ref SourceCode);

            return SourceCode;
        }

        private static string GetConvertFuncion(string nStringType)
        {
            return nStringType + ".Parse";
        }

        #endregion

        #region Metodos

        private static void WriteBeginSource(ref StringBuilder nSourceCode, string nConnectionName, string nNamespaceMap,
                                             string nCatalogClassName)
        {
            // Escribir el encabezado
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "//------------------------------------------------------------------------------");
            DataBaseClassWriter.Write(nSourceCode, 0, "// <auto-generated>");
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "//   Este código fue generado automaticamente por una herramienta de propiedad de CargoMaster");
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "//   Versión del motor en tiempo de ejecución: " + Program.AssemblyVersion);
            DataBaseClassWriter.Write(nSourceCode, 0, "//");
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "//   Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si");
            DataBaseClassWriter.Write(nSourceCode, 0, "//   se vuelve a generar el código.");
            DataBaseClassWriter.Write(nSourceCode, 0, "// </auto-generated>");
            DataBaseClassWriter.Write(nSourceCode, 0,
                                      "//------------------------------------------------------------------------------");
            DataBaseClassWriter.Write(nSourceCode, 0, "// Conexion: " + nConnectionName);
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Escribir el Namespace
            DataBaseClassWriter.Write(nSourceCode, 0, getNamespace(nNamespaceMap, nCatalogClassName));
            DataBaseClassWriter.Write(nSourceCode, 0, "{");
        }

        private static string getNamespace(string nNamespaceMap, string nCatalogClassName)
        {
            return "namespace " + nNamespaceMap + (nNamespaceMap == "" ? nCatalogClassName : "." + nCatalogClassName);
        }

        private static void WriteEndSource(ref StringBuilder nSourceCode)
        {

            DataBaseClassWriter.Write(nSourceCode, 0, "}");
        }

        private static void WriteDatabaseManagerClass(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                                      int nidConnection, string nCatalogClassName,
                                                      DataTable schemas, string nCatalog)
        {
            // Escribir inicio de la clase DBManager
            DataBaseClassWriter.Write(nSourceCode, 1, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "/// Clase encargada de encapsular todos los accesos a la base de datos " +
                                      nCatalog);
            DataBaseClassWriter.Write(nSourceCode, 1, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "public partial class " + nCatalogClassName + "DBManager : DBManager");
            DataBaseClassWriter.Write(nSourceCode, 1, "{");


            // Declaracion variables locales de los esquemas
            DataBaseClassWriter.Write(nSourceCode, 2, "#region Declaraciones");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "private " + SchemaConfig.Schema_Alias + "Schema" + " _Schema" +
                                          SchemaConfig.Schema_Alias + ";");
            }
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Propiedades de acceso a los esquemas
            DataBaseClassWriter.Write(nSourceCode, 2, "#region Propiedades");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public " + SchemaConfig.Schema_Alias + "Schema" + " Schema" +
                                          SchemaConfig.Schema_Alias);
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "get { return _Schema" + SchemaConfig.Schema_Alias + "; }");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");
            }
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 2, "public override string ClassFileName");
            DataBaseClassWriter.Write(nSourceCode, 2, "{");
            DataBaseClassWriter.Write(nSourceCode, 3, "get { return this.GetType().Name; }");
            DataBaseClassWriter.Write(nSourceCode, 2, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
            DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Constructores de la clase
            DataBaseClassWriter.Write(nSourceCode, 2, "#region Constructores");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 2,
                                      "public " + nCatalogClassName + "DBManager(string nConnectionString)");
            DataBaseClassWriter.Write(nSourceCode, 3, ": base(nConnectionString)");
            DataBaseClassWriter.Write(nSourceCode, 2, "{");
            DataBaseClassWriter.Write(nSourceCode, 3, "Initialize();");
            DataBaseClassWriter.Write(nSourceCode, 2, "}");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 2, "private void Initialize()");
            DataBaseClassWriter.Write(nSourceCode, 2, "{");
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "_Schema" + SchemaConfig.Schema_Alias + " = new " + SchemaConfig.Schema_Alias +
                                          "Schema(this);");
            }

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            // Inicializar mapeo de esquemas
            DataBaseClassWriter.Write(nSourceCode, 3, "if(this.SchemaMaping.Schemas.Count == 0)");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "this.SchemaMaping.Schemas.Add(\"" + SchemaConfig.Schema_Alias + "\", \"" +
                                          SchemaConfig.Schema_Name + "\");");
            }
            DataBaseClassWriter.Write(nSourceCode, 3, "}");

            DataBaseClassWriter.Write(nSourceCode, 2, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");

            DataBaseClassWriter.Write(nSourceCode, 1, "}");
        }

        private static void WriteSchemaEnum(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap, int nidConnection,
                                            string nCatalogClassName, string nCatalog, DataTable schemas)
        {
            DataBaseClassWriter.Write(nSourceCode, 1, "///<summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "///Enumeración de los esquemas de la base de datos " + nCatalog);
            DataBaseClassWriter.Write(nSourceCode, 1, "///</summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "public class " + nCatalogClassName + "SchemaEnum : SchemaEnum");
            DataBaseClassWriter.Write(nSourceCode, 1, "{");

            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public static readonly " + nCatalogClassName + "SchemaEnum " +
                                          SchemaConfig.Schema_Alias + " = new " + nCatalogClassName + "SchemaEnum(\"" +
                                          SchemaConfig.Schema_Name + "\");");
            }

            DataBaseClassWriter.Write(nSourceCode, 2,
                                      nCatalogClassName + "SchemaEnum(string nSchemaName) : base(nSchemaName) { }");

            DataBaseClassWriter.Write(nSourceCode, 1, "}");

            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 1, "///<summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "///Colección de esquemas enumerados de la base de datos" + nCatalog);
            DataBaseClassWriter.Write(nSourceCode, 1, "///</summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "public class " + nCatalogClassName + "SchemaEnumList : SchemaEnumList");
            DataBaseClassWriter.Write(nSourceCode, 1, "{");
            DataBaseClassWriter.Write(nSourceCode, 2, "public " + nCatalogClassName + "SchemaEnumList() {}");


            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 2,
                                      "public " + nCatalogClassName + "SchemaEnumList(" + nCatalogClassName +
                                      "SchemaEnum nSchema) { base.Add(nSchema); }");


            DataBaseClassWriter.Write(nSourceCode, 1, "}"); // Fin de la clase
        }

        private static void WriteSchemaManager(ref StringBuilder nSourceCode, string nCatalog,
                                               DataTable schemas, XsdDataBase nDataBaseMap, int nidConnection,
                                               bool IsMobile, bool UseFramework2)
        {
            // Recorrer los esquemas
            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());

                // objetos del esquema                    
                var sqlFilter = "Generic_Type = 'Table' AND Catalog_Name = '" + nCatalog + "' AND Schema_Name = '" +
                                SchemaConfig.Schema_Name + "' AND Selected = 1";
                var tablas = (XsdDataBase.TBL_ObjectRow[]) (nDataBaseMap.TBL_Object.Select(sqlFilter));

                sqlFilter = "Generic_Type = 'View' AND Catalog_Name = '" + nCatalog + "' AND Schema_Name = '" +
                            SchemaConfig.Schema_Name + "' AND Selected = 1";
                var vistas = (XsdDataBase.TBL_ObjectRow[]) (nDataBaseMap.TBL_Object.Select(sqlFilter));

                sqlFilter = "Generic_Type = 'StoredProcedure' AND Catalog_Name = '" + nCatalog + "' AND Schema_Name = '" +
                            SchemaConfig.Schema_Name + "' AND Selected = 1";
                var procedimientos = (XsdDataBase.TBL_ObjectRow[]) (nDataBaseMap.TBL_Object.Select(sqlFilter));

                // Escribir inicio de la clase
                DataBaseClassWriter.Write(nSourceCode, 1, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "/// Clase encargada de encapsular las funcionalidades de acceso al esquema " +
                                          SchemaConfig.Schema_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "/// </summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "public class " + SchemaConfig.Schema_Alias + "Schema" + " : SchemaManager");
                DataBaseClassWriter.Write(nSourceCode, 1, "{");


                // Declaracion variables locales del esquema
                DataBaseClassWriter.Write(nSourceCode, 2, "#region Declaraciones");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WriteDeclaracionesEsquema(ref nSourceCode, tablas, SchemaConfig.Schema_Alias, "Table");
                WriteDeclaracionesEsquema(ref nSourceCode, vistas, SchemaConfig.Schema_Alias, "View");
                WriteDeclaracionesEsquema(ref nSourceCode, procedimientos, SchemaConfig.Schema_Alias, "StoreProcedure");
                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Declaracion propiedades del esquema
                DataBaseClassWriter.Write(nSourceCode, 2, "#region Propiedades");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WritePropiedadesEsquema(ref nSourceCode, tablas, SchemaConfig.Schema_Alias, "Table");
                WritePropiedadesEsquema(ref nSourceCode, vistas, SchemaConfig.Schema_Alias, "View");
                WritePropiedadesEsquema(ref nSourceCode, procedimientos, SchemaConfig.Schema_Alias, "StoreProcedure");
                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Constructores
                DataBaseClassWriter.Write(nSourceCode, 2, "#region Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "internal " + SchemaConfig.Schema_Alias + "Schema" +
                                          "(DBManager nDbManager)");
                DataBaseClassWriter.Write(nSourceCode, 3, ": base(nDbManager)");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "base.SchemaAlias = \"" + SchemaConfig.Schema_Alias + "\";");
                DataBaseClassWriter.Write(nSourceCode, 3, "Initialize();");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "private void Initialize()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                WriteInitializeEsquema(ref nSourceCode, tablas, SchemaConfig.Schema_Alias, "Table");
                WriteInitializeEsquema(ref nSourceCode, vistas, SchemaConfig.Schema_Alias, "View");
                WriteInitializeEsquema(ref nSourceCode, procedimientos, SchemaConfig.Schema_Alias, "StoreProcedure");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");


                DataBaseClassWriter.Write(nSourceCode, 1, "}"); // Fin de la clase
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Enumeraciones
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "#region Enumeraciones del esquema " + SchemaConfig.Schema_Name);
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WriteObjectEnum(ref nSourceCode, SchemaConfig.Schema_Name, SchemaConfig.Schema_Alias, tablas, "Table");
                WriteObjectEnum(ref nSourceCode, SchemaConfig.Schema_Name, SchemaConfig.Schema_Alias, vistas, "View");
                WriteObjectEnum(ref nSourceCode, SchemaConfig.Schema_Name, SchemaConfig.Schema_Alias, procedimientos,
                                "StoredProcedure");
                DataBaseClassWriter.Write(nSourceCode, 1, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Escribir el Namespace del esquema
                DataBaseClassWriter.Write(nSourceCode, 1, "namespace Schema" + SchemaConfig.Schema_Alias);
                DataBaseClassWriter.Write(nSourceCode, 1, "{");

                // Escribir objetos
                DataBaseClassWriter.Write(nSourceCode, 2, "#region Objetos de acceso a datos");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WriteTables(ref nSourceCode, nDataBaseMap, tablas);
                WriteViews(ref nSourceCode, nDataBaseMap, vistas);
                WriteStoreProcedures(ref nSourceCode, nDataBaseMap, procedimientos);
                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Escribir las tablas tipadas
                DataBaseClassWriter.Write(nSourceCode, 2, "#region Tablas tipadas");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                WriteDataTables(ref nSourceCode, nDataBaseMap, tablas, IsMobile, UseFramework2);
                WriteDataTables(ref nSourceCode, nDataBaseMap, vistas, IsMobile, UseFramework2);
                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 1, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

            } //Fin de esquemas
        }

        private static void WriteObjectEnum(ref StringBuilder nSourceCode, string SchemaName, string nCatalogClassName,
                                            XsdDataBase.TBL_ObjectRow[] nObjetos, string nTipo)
        {
            DataBaseClassWriter.Write(nSourceCode, 1, "///<summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "///Enumeración de " + nTipo + " del esquema " + SchemaName);
            DataBaseClassWriter.Write(nSourceCode, 1, "///</summary>");
            DataBaseClassWriter.Write(nSourceCode, 1, "public class " + nCatalogClassName + nTipo + "Enum : ObjectEnum");
            DataBaseClassWriter.Write(nSourceCode, 1, "{");

            foreach (var objeto in nObjetos)
            {
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public static readonly " + nCatalogClassName + nTipo + "Enum " +
                                          FormatCode.ToIdentifier(objeto.Object_Name) + " = new " + nCatalogClassName +
                                          nTipo + "Enum(\"" + objeto.Object_Name + "\");");
            }

            DataBaseClassWriter.Write(nSourceCode, 2,
                                      nCatalogClassName + nTipo + "Enum(string n" + nTipo + "Name) : base(n" + nTipo +
                                      "Name) { }");
            DataBaseClassWriter.Write(nSourceCode, 1, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            DataBaseClassWriter.Write(nSourceCode, 1, "///<summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "///Colección de " + nTipo + " enumerados del esquema " + SchemaName);
            DataBaseClassWriter.Write(nSourceCode, 1, "///</summary>");
            DataBaseClassWriter.Write(nSourceCode, 1,
                                      "public class " + nCatalogClassName + nTipo + "EnumList : ObjectEnumList");
            DataBaseClassWriter.Write(nSourceCode, 1, "{");
            DataBaseClassWriter.Write(nSourceCode, 2, "public " + nCatalogClassName + nTipo + "EnumList() {}");
            DataBaseClassWriter.Write(nSourceCode, 2,
                                      "public " + nCatalogClassName + nTipo + "EnumList(" + nCatalogClassName + nTipo +
                                      "Enum n" + nTipo + ") { base.Add(n" + nTipo + "); }");
            DataBaseClassWriter.Write(nSourceCode, 1, "}");

            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDeclaracionesEsquema(ref StringBuilder nSourceCode, XsdDataBase.TBL_ObjectRow[] objetos,
                                                      string SchemaNameFormated, string nTipo)
        {
            DataBaseClassWriter.Write(nSourceCode, 2, "//" + nTipo);
            foreach (var objeto in objetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(objeto.Object_Name);

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "private Schema" + SchemaNameFormated + "." + ObjetNameFormated + nTipo + " _" +
                                          ObjetNameFormated + ";");
            }

            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WritePropiedadesEsquema(ref StringBuilder nSourceCode, XsdDataBase.TBL_ObjectRow[] objetos,
                                                    string SchemaNameFormated, string nTipo)
        {
            DataBaseClassWriter.Write(nSourceCode, 2, "//" + nTipo);
            foreach (var objeto in objetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(objeto.Object_Name);

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public Schema" + SchemaNameFormated + "." + ObjetNameFormated + nTipo + " " +
                                          ObjetNameFormated);
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "get { return this._" + ObjetNameFormated + "; }");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");
            }

            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteInitializeEsquema(ref StringBuilder nSourceCode, XsdDataBase.TBL_ObjectRow[] objetos,
                                                   string SchemaNameFormated, string nTipo)
        {
            DataBaseClassWriter.Write(nSourceCode, 3, "//" + nTipo);
            foreach (var objeto in objetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(objeto.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          " this._" + ObjetNameFormated + " = new Schema" + SchemaNameFormated + "." +
                                          ObjetNameFormated + nTipo + "(this);");
            }
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteTables(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                        XsdDataBase.TBL_ObjectRow[] nObjetos)
        {
            foreach (var Objeto in nObjetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(Objeto.Object_Name);
                var ObjetNameFormatedType = ObjetNameFormated + "Table";

                DataBaseClassWriter.Write(nSourceCode, 2, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "/// Clase encargada de encapsular las funcionalidades de acceso a la tabla " +
                                          Objeto.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 2, "/// </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "public class " + ObjetNameFormatedType + " : TableManager");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");

                // Constructores
                DataBaseClassWriter.Write(nSourceCode, 3, "#region Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "internal " + ObjetNameFormatedType + "(SchemaManager nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, ": base(nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "base._ObjectName = \"" + Objeto.Object_Name + "\";");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#region Metodos");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Llaves primarias
                var PrimaryKeys = nDataBaseMap.GetPrimaryKeys(Objeto);
                // Columnas
                var TableColumns = nDataBaseMap.GetTableColumns(Objeto);
                // Identificador unico de la tabla ( Puede hacer parte de una llave compuesta )
                var KeyParam = nDataBaseMap.GetIdOnPrimaryKey(Objeto);
                // LLaves foraneas que se encuentran en la llave primaria
                //var nPrimaryForeingKeys = nDataBaseMap.GetForeignsOnPrimaryKeys(Objeto);


                // Implementacion de DBInsert
                WriteDBInsert(ref nSourceCode, TableColumns);
                WriteDBInsertTyped(ref nSourceCode, TableColumns, Objeto.Object_Name);
                WriteDBInsertRow(ref nSourceCode, TableColumns, Objeto.Object_Name);

                foreach (var Key in KeyParam)
                {
                    // Implementacion de DBNextId
                    WriteDBNextId(ref nSourceCode, PrimaryKeys, Key, KeyParam.Count > 1);

                    // Implementacion de DBSaveTableAutoNextId
                    WriteDBSaveTableAutoNextId(ref nSourceCode, TableColumns, PrimaryKeys, Key, KeyParam.Count > 1);
                    WriteDBSaveTableAutoNextIdTyped(ref nSourceCode, TableColumns, PrimaryKeys, Key, ObjetNameFormated,
                                                    KeyParam.Count > 1);
                }

                // Implementacion de DBUpdate
                WriteDBUpdate(ref nSourceCode, TableColumns, PrimaryKeys);
                WriteDBUpdateTyped(ref nSourceCode, TableColumns, PrimaryKeys, Objeto.Object_Name);

                // Implementacion de DBSaveTable
                WriteDBSaveTable(ref nSourceCode, TableColumns, PrimaryKeys);
                WriteDBSaveTableTyped(ref nSourceCode, TableColumns, PrimaryKeys, ObjetNameFormated);

                // Implementacion de DBDelete
                WriteDBDelete(ref nSourceCode, PrimaryKeys);

                // Implementacion de DBGet
                WriteDBGet(ref nSourceCode, PrimaryKeys, ObjetNameFormated);
                WriteDBGetOrderBy(ref nSourceCode, PrimaryKeys, ObjetNameFormated);

                // Implementacion de DBFill
                WriteDBFill(ref nSourceCode, PrimaryKeys);
                WriteDBFillOrderBy(ref nSourceCode, PrimaryKeys, ObjetNameFormated);
                WriteDBFillTyped(ref nSourceCode, PrimaryKeys, ObjetNameFormated);
                WriteDBFillOrderByTyped(ref nSourceCode, PrimaryKeys, ObjetNameFormated);

                // Filtros
                var filtros =
                    (XsdDataBase.TBL_FilterRow[]) (nDataBaseMap.TBL_Filter.Select("fk_Object = " + Objeto.id_Object));

                foreach (var filtro in filtros)
                {
                    int idMetodo = 0;

                    // Implementacion de DBFind
                    WriteDBFindBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);
                    WriteDBFindByOrderBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);

                    // Implementacion de DBFillBy
                    WriteDBFillBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro);
                    WriteDBFillByOrderBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 2, "}"); // Fin de la clase

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteViews(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                       XsdDataBase.TBL_ObjectRow[] nObjetos)
        {
            foreach (var Objeto in nObjetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(Objeto.Object_Name);
                var ObjetNameFormatedType = ObjetNameFormated + "View";

                DataBaseClassWriter.Write(nSourceCode, 2, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "/// Clase encargada de encapsular las funcionalidades de acceso a la vista " +
                                          Objeto.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 2, "/// </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "public class " + ObjetNameFormatedType + " : ViewManager");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");

                // Constructores
                DataBaseClassWriter.Write(nSourceCode, 3, "#region Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "internal " + ObjetNameFormatedType + "(SchemaManager nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, ": base(nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "base._ObjectName = \"" + Objeto.Object_Name + "\";");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#region Metodos");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Columnas
                //var nViewColumns = nDataBaseMap.GetTableColumns(Objeto);

                // Implementacion de DBGet
                WriteDBGet(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);
                WriteDBGetOrderBy(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);

                // Implementacion de DBFill
                WriteDBFill(ref nSourceCode, new List<Parameter>());
                WriteDBFillOrderBy(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);
                WriteDBFillTyped(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);
                WriteDBFillOrderByTyped(ref nSourceCode, new List<Parameter>(), ObjetNameFormated);

                // Filtros
                var filtros =
                    (XsdDataBase.TBL_FilterRow[]) (nDataBaseMap.TBL_Filter.Select("fk_Object = " + Objeto.id_Object));

                foreach (var filtro in filtros)
                {
                    int idMetodo = 0;

                    // Implementacion de DBFind
                    WriteDBFindBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);
                    WriteDBFindByOrderBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);

                    // Implementacion de DBFillBy
                    WriteDBFillBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro);
                    WriteDBFillByOrderBy(ref nSourceCode, nDataBaseMap, Objeto, ref idMetodo, filtro, ObjetNameFormated);
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 2, "}"); // Fin de la clase

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteStoreProcedures(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                                 XsdDataBase.TBL_ObjectRow[] nObjetos)
        {
            foreach (var Objeto in nObjetos)
            {
                var ObjetNameFormated = FormatCode.ToIdentifier(Objeto.Object_Name);
                var ObjetNameFormatedType = ObjetNameFormated + "StoreProcedure";

                DataBaseClassWriter.Write(nSourceCode, 2, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "/// Clase encargada de encapsular las funcionalidades de acceso al procedimiento almacenado " +
                                          Objeto.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 2, "/// </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public class " + ObjetNameFormatedType + " : StoreProcedureManager");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");

                // Constructores
                DataBaseClassWriter.Write(nSourceCode, 3, "#region Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "internal " + ObjetNameFormatedType + "(SchemaManager nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 4, ": base(nSchemaManager)");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "base._ObjectName = \"" + Objeto.Object_Name + "\";");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                var opetarionParams = "";
                var returnRows = Objeto.GetTBL_SP_ReturnRows();
                var retType = ReturnType.TablaGenerica;
                XsdDataBase.TBL_ObjectRow objectReturned = null;
                var dataTypeReturned = DbType.Object;

                if (returnRows.Length > 0)
                {
                    retType = (ReturnType) (Enum.Parse(typeof (ReturnType), returnRows[0].Return_Type));

                    switch (retType)
                    {
                        case ReturnType.TablaTipada:
                            DataRow[] Filas =
                                nDataBaseMap.TBL_Object.Select("Schema_Name = '" + returnRows[0].Schema_Name_Returned +
                                                               "' AND Object_Name = '" +
                                                               returnRows[0].Object_Name_Returned + "'");

                            if (Filas.Length > 0)
                                objectReturned = (XsdDataBase.TBL_ObjectRow) (Filas[0]);
                            else
                                throw new Exception("El procedimiento almacenado " + Objeto.Object_Name +
                                                    ", retorna un objeto de tipo " + returnRows[0].Object_Name_Returned +
                                                    " que no se encuentra definido");

                            //objectReturned = (XsdDataBase.TBL_ObjectRow)(nDataBaseMap.TBL_Object.Select("Schema_Name = '" + returnRows[0].Schema_Name_Returned + "' AND Object_Name = '" + returnRows[0].Object_Name_Returned + "'")[0]);
                            break;

                        case ReturnType.Escalar:
                            dataTypeReturned = (DbType) (Enum.Parse(typeof (DbType), returnRows[0].Data_Type_Returned));

                            break;
                    }
                }

                var nParameters = nDataBaseMap.GetParameters(Objeto);

                opetarionParams = "";

                foreach (var par in nParameters)
                {
                    if (opetarionParams != "")
                        opetarionParams += ", ";

                    opetarionParams = opetarionParams +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                      " n" + par.Name.TrimStart('@');
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "#region Metodos");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                if (retType == ReturnType.Nada)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "///Permite la ejecución del procedimiento almacenado " +
                                              Objeto.Object_Name);
                    DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                    DataBaseClassWriter.Write(nSourceCode, 3, "public void DBExecute(" + opetarionParams + ")");
                    DataBaseClassWriter.Write(nSourceCode, 3, "{");
                    DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nParameters = new List<Parameter>();");

                    foreach (var par in nParameters)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4,
                                                  "nParameters.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                                  par.Type.ToString() + ", \"" + par.SpecificType + "\", n" +
                                                  par.Name.TrimStart('@') + ", " +
                                                  DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) +
                                                  ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                                  ", ParameterDirection." + par.Direction.ToString() + "));");
                    }

                    DataBaseClassWriter.Write(nSourceCode, 4, "base.DBExecuteSp(nParameters);");
                    DataBaseClassWriter.Write(nSourceCode, 3, "}");
                    DataBaseClassWriter.Write(nSourceCode, 0, "");
                }
                else
                {
                    var strReturnType = "";

                    switch (retType)
                    {
                        case ReturnType.Escalar:
                            strReturnType = DataBaseClassWriter.GetApplicationStringType(dataTypeReturned.ToString(),
                                                                                         LanguajeType.CSharp);
                            break;
                        case ReturnType.TablaTipada:
                            if (objectReturned != null)
                                strReturnType = "Schema" + FormatCode.ToIdentifier(objectReturned.Schema_Name) + "." +
                                                FormatCode.ToIdentifier(objectReturned.Object_Name) + "DataTable";
                            break;
                        case ReturnType.TablaGenerica:
                            strReturnType = "DataTable";
                            break;
                    }

                    DataBaseClassWriter.Write(nSourceCode, 3, "///<summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "///Permite la ejecución del procedimiento almacenado " +
                                              Objeto.Object_Name + " y retorna los datos encontrados");
                    DataBaseClassWriter.Write(nSourceCode, 3, "///</summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "public " + strReturnType + " DBExecute(" + opetarionParams + ")");
                    DataBaseClassWriter.Write(nSourceCode, 3, "{");
                    DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nParameters = new List<Parameter>();");

                    foreach (var par in nParameters)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4,
                                                  "nParameters.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                                  par.Type.ToString() + ", \"" + par.SpecificType + "\", n" +
                                                  par.Name.TrimStart('@') + ", " +
                                                  DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) +
                                                  ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                                  ", ParameterDirection." + par.Direction.ToString() + "));");
                    }

                    if (retType == ReturnType.Escalar)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4, "try");
                        DataBaseClassWriter.Write(nSourceCode, 4, "{");
                        DataBaseClassWriter.Write(nSourceCode, 5, strReturnType + " Value;");
                        DataBaseClassWriter.Write(nSourceCode, 5, "DataTable tableData = new DataTable();");
                        DataBaseClassWriter.Write(nSourceCode, 5, "base.DBExecuteSp(tableData, nParameters);");

                        DataBaseClassWriter.Write(nSourceCode, 5, "if(tableData.Rows.Count > 0)");
                        DataBaseClassWriter.Write(nSourceCode, 5, "{");

                        if (strReturnType.ToUpper() == "STRING")
                            DataBaseClassWriter.Write(nSourceCode, 6, "Value = tableData.Rows[0][0].ToString();");
                        if (dataTypeReturned.ToString().ToUpper() == "BINARY")
                            DataBaseClassWriter.Write(nSourceCode, 6, "Value = (byte[])tableData.Rows[0][0];");
                        else
                            DataBaseClassWriter.Write(nSourceCode, 6,
                                                      "Value = " + GetConvertFuncion(dataTypeReturned.ToString()) +
                                                      "(tableData.Rows[0][0].ToString());");

                        DataBaseClassWriter.Write(nSourceCode, 6, "return Value;");

                        DataBaseClassWriter.Write(nSourceCode, 5, "}");
                        DataBaseClassWriter.Write(nSourceCode, 5, "else");
                        DataBaseClassWriter.Write(nSourceCode, 5, "{");
                        DataBaseClassWriter.Write(nSourceCode, 5,
                                                  "throw new Exception(\"El procedimiento no retornó valor\");");
                        DataBaseClassWriter.Write(nSourceCode, 5, "}");

                        DataBaseClassWriter.Write(nSourceCode, 4, "}");
                        DataBaseClassWriter.Write(nSourceCode, 4, "catch( Exception ex)");
                        DataBaseClassWriter.Write(nSourceCode, 4, "{");
                        DataBaseClassWriter.Write(nSourceCode, 5,
                                                  "throw new Exception(\"No fue posible ejecutar el procedimiento almacenado " +
                                                  Objeto.Object_Name + ", \" + ex.Message, ex);");
                        DataBaseClassWriter.Write(nSourceCode, 4, "}");
                    }
                    else
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4, "DataTable tableData = new " + strReturnType + "();");
                        DataBaseClassWriter.Write(nSourceCode, 4, "try");
                        DataBaseClassWriter.Write(nSourceCode, 4, "{");
                        DataBaseClassWriter.Write(nSourceCode, 5, "base.DBExecuteSp(tableData, nParameters);");
                        DataBaseClassWriter.Write(nSourceCode, 4, "}");
                        DataBaseClassWriter.Write(nSourceCode, 4, "catch(Exception ex)");
                        DataBaseClassWriter.Write(nSourceCode, 4, "{");
                        DataBaseClassWriter.Write(nSourceCode, 5,
                                                  "throw new Exception(\"No fue posible ejecutar el procedimiento almacenado " +
                                                  Objeto.Object_Name + ", \" + ex.Message, ex);");
                        DataBaseClassWriter.Write(nSourceCode, 4, "}");
                        DataBaseClassWriter.Write(nSourceCode, 4, "return (" + strReturnType + ")tableData;");
                    }

                    DataBaseClassWriter.Write(nSourceCode, 3, "}");
                    DataBaseClassWriter.Write(nSourceCode, 0, "");
                }

                if (retType == ReturnType.TablaTipada || retType == ReturnType.TablaGenerica)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3, "///<summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "///Permite la ejecución del procedimiento almacenado " +
                                              Objeto.Object_Name + " y retorna los datos encontrados");
                    DataBaseClassWriter.Write(nSourceCode, 3, "///</summary>");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "public void DBExecute(DataTable tableData" +
                                              (opetarionParams == "" ? "" : ", " + opetarionParams) + ")");
                    DataBaseClassWriter.Write(nSourceCode, 3, "{");
                    DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nParameters = new List<Parameter>();");

                    foreach (var par in nParameters)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 4,
                                                  "nParameters.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                                  par.Type.ToString() + ", \"" + par.SpecificType + "\", n" +
                                                  par.Name.TrimStart('@') + ", " +
                                                  DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) +
                                                  ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                                  ", ParameterDirection." + par.Direction.ToString() + "));");
                    }

                    DataBaseClassWriter.Write(nSourceCode, 4, "try");
                    DataBaseClassWriter.Write(nSourceCode, 4, "{");
                    DataBaseClassWriter.Write(nSourceCode, 5, "base.DBExecuteSp(tableData, nParameters);");
                    DataBaseClassWriter.Write(nSourceCode, 4, "}");
                    DataBaseClassWriter.Write(nSourceCode, 4, "catch(Exception ex)");
                    DataBaseClassWriter.Write(nSourceCode, 4, "{");
                    DataBaseClassWriter.Write(nSourceCode, 5,
                                              "throw new Exception(\"No fue posible ejecutar el procedimiento almacenado " +
                                              Objeto.Object_Name + ", \" + ex.Message, ex);");
                    DataBaseClassWriter.Write(nSourceCode, 4, "}");

                    DataBaseClassWriter.Write(nSourceCode, 3, "}");
                    DataBaseClassWriter.Write(nSourceCode, 0, "");
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 2, "}"); // Fin de la clase

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDataTables(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                            XsdDataBase.TBL_ObjectRow[] tablas, bool IsMobile, bool UseFramework2)
        {
            var idMetodo = 0;

            foreach (var table in tablas)
            {
                DataBaseClassWriter.Write(nSourceCode, 2, "#region " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                var nPrimaryKeys = nDataBaseMap.GetPrimaryKeys(table);
                var ObjetNameFormated = FormatCode.ToIdentifier(table.Object_Name);
                var nInColumns = nDataBaseMap.GetTableColumns(table);

                DataBaseClassWriter.Write(nSourceCode, 1, "///<summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "///Enumeración de las columnas de la tabla " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "///</summary>");
                DataBaseClassWriter.Write(nSourceCode, 1, "public class " + ObjetNameFormated + "Enum : ColumnEnum");
                DataBaseClassWriter.Write(nSourceCode, 1, "{");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "public static readonly " + ObjetNameFormated + "Enum " +
                                              FormatCode.ToIdentifier(par.Name) + " = new " + ObjetNameFormated +
                                              "Enum(\"" + par.Name + "\");");
                }

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          ObjetNameFormated + "Enum(string nColumnName) : base(nColumnName) { }");
                DataBaseClassWriter.Write(nSourceCode, 1, "}");

                DataBaseClassWriter.Write(nSourceCode, 1, "///<summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "///Colección columnas enumeradas de la tabla " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "///</summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "public class " + ObjetNameFormated + "EnumList : ColumnEnumList");
                DataBaseClassWriter.Write(nSourceCode, 1, "{");
                DataBaseClassWriter.Write(nSourceCode, 2, "public " + ObjetNameFormated + "EnumList() {}");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public " + ObjetNameFormated + "EnumList(" + ObjetNameFormated +
                                          "Enum nColumn, bool nAscendente) { base.Add(nColumn, nAscendente); }");
                DataBaseClassWriter.Write(nSourceCode, 1, "}");


                DataBaseClassWriter.Write(nSourceCode, 1, "///<summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "///Representa un DataTable tipado de la tabla " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "///</summary>");
                DataBaseClassWriter.Write(nSourceCode, 1, "[Serializable()]");

                if (UseFramework2)
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "public partial class " + ObjetNameFormated +
                                              "DataTable : CMData.Utils.TypedTable<" + ObjetNameFormated + "Row>");
                else
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "public partial class " + ObjetNameFormated +
                                              "DataTable : System.Data.TypedTableBase<" + ObjetNameFormated + "Row>");

                DataBaseClassWriter.Write(nSourceCode, 1, "{");

                DataBaseClassWriter.Write(nSourceCode, 0, "#region Declaraciones");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "private global::System.Data.DataColumn column" +
                                              FormatCode.ToIdentifier(par.Name) + ";");
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#region Propiedades");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "public global::System.Data.DataColumn " +
                                              FormatCode.ToIdentifier(par.Name) + "Column");
                    DataBaseClassWriter.Write(nSourceCode, 2, "{");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "get { return this.column" + FormatCode.ToIdentifier(par.Name) + "; }");
                    DataBaseClassWriter.Write(nSourceCode, 2, "}");
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");

                if (!IsMobile)
                    DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.ComponentModel.Browsable(false)]");

                DataBaseClassWriter.Write(nSourceCode, 2, "public int Count");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "get { return this.Rows.Count; }");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "public " + ObjetNameFormated + "Row this[int index]");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "get { return (" + ObjetNameFormated + "Row)this.Rows[index]; }");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#region Constructores");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "public " + ObjetNameFormated + "DataTable()");
                DataBaseClassWriter.Write(nSourceCode, 3, ": base()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.TableName = \"" + table.Object_Name + "\";");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.BeginInit();");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.InitClass();");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.EndInit();");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "internal " + ObjetNameFormated +
                                          "DataTable(global::System.Data.DataTable table)");
                DataBaseClassWriter.Write(nSourceCode, 3, ": base()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.TableName = table.TableName;");

                DataBaseClassWriter.Write(nSourceCode, 3, "if(table.CaseSensitive != table.DataSet.CaseSensitive)");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "this.CaseSensitive = table.CaseSensitive;");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");

                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "if(table.Locale.ToString() != table.DataSet.Locale.ToString())");
                DataBaseClassWriter.Write(nSourceCode, 4, "this.Locale = table.Locale;");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "if(table.Namespace != table.DataSet.Namespace)");
                DataBaseClassWriter.Write(nSourceCode, 4, "this.Namespace = table.Namespace;");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 3, "this.Prefix = table.Prefix;");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.MinimumCapacity = table.MinimumCapacity;");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                if (!IsMobile)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "public " + ObjetNameFormated +
                                              "DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)");
                    DataBaseClassWriter.Write(nSourceCode, 3, ":base(info, context)");
                    DataBaseClassWriter.Write(nSourceCode, 2, "{");
                    DataBaseClassWriter.Write(nSourceCode, 3, "this.InitVars();");
                    DataBaseClassWriter.Write(nSourceCode, 2, "}");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#region Metodos");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public void Remove" + ObjetNameFormated + "Row( " + ObjetNameFormated +
                                          "Row row)");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.Rows.Remove(row);");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public void Add" + ObjetNameFormated + "Row(" + ObjetNameFormated +
                                          "Row row)");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.Rows.Add(row);");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "internal void InitVars()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "this.column" + FormatCode.ToIdentifier(par.Name) + " = base.Columns[\"" +
                                              par.Name + "\"];");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "private void InitClass()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "this.column" + FormatCode.ToIdentifier(par.Name) +
                                              " = new global::System.Data.DataColumn(\"" + par.Name + "\", typeof(" +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp,
                                                                                           false) +
                                              "), null, global::System.Data.MappingType.Element);");

                    if (par.MaxLength > 0 && CMData.DataBase.DataBase.IsStringType(par) && table.Generic_Type != "View")
                        DataBaseClassWriter.Write(nSourceCode, 3,
                                                  "this.column" + FormatCode.ToIdentifier(par.Name) + ".MaxLength = " +
                                                  par.MaxLength + ";");

                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "base.Columns.Add(this.column" + FormatCode.ToIdentifier(par.Name) + ");");
                }

                var strLine = "";
                if (table.Generic_Type != "View")
                {
                    if (nPrimaryKeys.Count > 0)
                    {
                        strLine = "";
                        foreach (var par in nPrimaryKeys)
                        {
                            if (strLine != "")
                                strLine += ", ";

                            strLine += "this.column" + par.Name;
                        }

                        DataBaseClassWriter.Write(nSourceCode, 3,
                                                  "this.Constraints.Add(new global::System.Data.UniqueConstraint(\"" +
                                                  table.Object_Name + "Key1\", new global::System.Data.DataColumn[] { " +
                                                  strLine + "}, true));");
                    }

                    foreach (var par in nInColumns)
                    {
                        if (!par.IsNullable)
                            DataBaseClassWriter.Write(nSourceCode, 3,
                                                      "this.column" + FormatCode.ToIdentifier(par.Name) +
                                                      ".AllowDBNull = false;");
                    }
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#region Funciones");

                var strLine2 = "";
                if (nPrimaryKeys.Count > 0 && table.Generic_Type != "View")
                {
                    strLine = "";
                    foreach (var par in nPrimaryKeys)
                    {
                        strLine += par.Name;
                    }

                    var strFunctionName = strLine;

                    if (strFunctionName.Length > 500)
                    {
                        idMetodo++;
                        strFunctionName = strFunctionName.Substring(0, 500) + idMetodo.ToString();
                    }

                    strLine2 = "";
                    foreach (var par in nPrimaryKeys)
                    {
                        if (strLine2 != "")
                            strLine2 += ", ";

                        strLine2 += DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, false) +
                                    " n" + par.Name;
                    }

                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "public " + ObjetNameFormated + "Row FindBy" + strFunctionName + "(" +
                                              strLine2 + ")");
                    DataBaseClassWriter.Write(nSourceCode, 2, "{");

                    strLine = "";
                    foreach (var par in nPrimaryKeys)
                    {
                        if (strLine != "")
                            strLine += ", ";

                        strLine += "n" + par.Name;
                    }

                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "return (" + ObjetNameFormated + "Row)this.Rows.Find(new object[] {" +
                                              strLine + "});");
                    DataBaseClassWriter.Write(nSourceCode, 2, "}");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public " + ObjetNameFormated + "Row New" + ObjetNameFormated + "Row()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "return (" + ObjetNameFormated + "Row)this.NewRow();");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");

                strLine = "";
                strLine2 = "";

                foreach (var par in nInColumns)
                {
                    if (strLine != "")
                        strLine += ", ";

                    if (strLine2 != "")
                        strLine2 += ", ";

                    strLine +=
                        DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, par.IsNullable) +
                        " n" + par.Name;
                    strLine2 += "DBNulls.GetPrimitiveObjectValue(n" + par.Name + ")";
                }

                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "public " + ObjetNameFormated + "Row Add" + ObjetNameFormated + "Row(" +
                                          strLine + ")");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          FormatCode.ToIdentifier(table.Object_Name) + "Row row" + ObjetNameFormated +
                                          "Row = (" + ObjetNameFormated + "Row)this.NewRow();");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "object[] columnValuesArray = new object[] {" + strLine2 + "};");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "row" + ObjetNameFormated + "Row.ItemArray = columnValuesArray;");
                DataBaseClassWriter.Write(nSourceCode, 3, "this.Rows.Add(row" + ObjetNameFormated + "Row);");
                DataBaseClassWriter.Write(nSourceCode, 3, "return row" + ObjetNameFormated + "Row;");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "public override global::System.Data.DataTable Clone()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          FormatCode.ToIdentifier(table.Object_Name) + "DataTable cln = (" +
                                          ObjetNameFormated + "DataTable)base.Clone();");
                DataBaseClassWriter.Write(nSourceCode, 3, "cln.InitVars();");
                DataBaseClassWriter.Write(nSourceCode, 3, "return cln;");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "return new " + ObjetNameFormated + "Row(builder);");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "protected override global::System.Type GetRowType()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "return typeof(" + ObjetNameFormated + "Row);");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "protected override global::System.Data.DataTable CreateInstance()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "return new " + ObjetNameFormated + "DataTable();");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                // Objeto complejo
                var objectName = FormatCode.ToIdentifier(table.Object_Name);
                var objectXmlName = objectName + "Type";

                DataBaseClassWriter.Write(nSourceCode, 2, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "/// Retorna una lista de filas de tipo " + table.Object_Name +
                                          " tipados para serializacion en XML");
                DataBaseClassWriter.Write(nSourceCode, 2, "/// </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "/// <returns></returns>");
                DataBaseClassWriter.Write(nSourceCode, 2, "public List<" + objectXmlName + "> ToXmlList()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "return XmlList<" + objectXmlName + ">.ConvertToXmlList(this);");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                // Objeto simple
                objectName = FormatCode.ToIdentifier(table.Object_Name);
                objectXmlName = objectName + "SimpleType";

                DataBaseClassWriter.Write(nSourceCode, 2, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "/// Retorna una lista de filas de tipo " + table.Object_Name +
                                          " tipados para serializacion en XML");
                DataBaseClassWriter.Write(nSourceCode, 2, "/// </summary>");
                DataBaseClassWriter.Write(nSourceCode, 2, "/// <returns></returns>");
                DataBaseClassWriter.Write(nSourceCode, 2, "public List<" + objectXmlName + "> ToSimpleXmlList()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "return XmlList<" + objectXmlName + ">.ConvertToXmlList(this);");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 1, "}");

                DataBaseClassWriter.Write(nSourceCode, 1, "///<summary>");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "///Representa un DataRow tipado de la tabla " + table.Object_Name);
                DataBaseClassWriter.Write(nSourceCode, 1, "///</summary>");
                DataBaseClassWriter.Write(nSourceCode, 1, "[Serializable()]");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "public partial class " + ObjetNameFormated +
                                          "Row : global::System.Data.DataRow");
                DataBaseClassWriter.Write(nSourceCode, 1, "{");

                DataBaseClassWriter.Write(nSourceCode, 0, "#region Declaraciones");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "private " + ObjetNameFormated + "DataTable table" + ObjetNameFormated + ";");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#region Propiedades");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "public " +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp,
                                                                                           false) + " " + par.Name);
                    DataBaseClassWriter.Write(nSourceCode, 2, "{");
                    DataBaseClassWriter.Write(nSourceCode, 3, "get");
                    DataBaseClassWriter.Write(nSourceCode, 3, "{");
                    DataBaseClassWriter.Write(nSourceCode, 4, "try");
                    DataBaseClassWriter.Write(nSourceCode, 4, "{");
                    DataBaseClassWriter.Write(nSourceCode, 5,
                                              "return (" +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp,
                                                                                           false) + " )this[this.table" +
                                              ObjetNameFormated + "." + par.Name + "Column];");
                    DataBaseClassWriter.Write(nSourceCode, 4, "}");
                    DataBaseClassWriter.Write(nSourceCode, 4, "catch(global::System.InvalidCastException e)");
                    DataBaseClassWriter.Write(nSourceCode, 4, "{");
                    DataBaseClassWriter.Write(nSourceCode, 5,
                                              "throw new global::System.Data.StrongTypingException(\"El valor de la columna '" +
                                              par.Name + "' de la tabla '" + ObjetNameFormated + "' es DBNull.\", e);");
                    DataBaseClassWriter.Write(nSourceCode, 4, "}");

                    DataBaseClassWriter.Write(nSourceCode, 3, "}");
                    DataBaseClassWriter.Write(nSourceCode, 3, "set");
                    DataBaseClassWriter.Write(nSourceCode, 3, "{");
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "this[this.table" + ObjetNameFormated + "." + par.Name +
                                              "Column] = value;");
                    DataBaseClassWriter.Write(nSourceCode, 3, "}");
                    DataBaseClassWriter.Write(nSourceCode, 2, "}");
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#region Constructores");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2,
                                          "internal " + ObjetNameFormated + "Row(global::System.Data.DataRowBuilder rb)");
                DataBaseClassWriter.Write(nSourceCode, 3, ": base(rb)");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "this.table" + ObjetNameFormated + " = (" + ObjetNameFormated +
                                          "DataTable)this.Table;");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#region Metodos");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                foreach (var par in nInColumns)
                {
                    if (par.IsNullable)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 2,
                                                  "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                        DataBaseClassWriter.Write(nSourceCode, 2, "public void Set" + par.Name + "Null()");
                        DataBaseClassWriter.Write(nSourceCode, 2, "{");
                        DataBaseClassWriter.Write(nSourceCode, 3,
                                                  "this[this.table" + ObjetNameFormated + "." + par.Name +
                                                  "Column] = global::System.Convert.DBNull;");
                        DataBaseClassWriter.Write(nSourceCode, 2, "}");
                    }
                }

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 0, "#region Funciones");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                foreach (var par in nInColumns)
                {
                    if (par.IsNullable)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 2,
                                                  "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                        DataBaseClassWriter.Write(nSourceCode, 2, "public bool Is" + par.Name + "Null()");
                        DataBaseClassWriter.Write(nSourceCode, 2, "{");
                        DataBaseClassWriter.Write(nSourceCode, 3,
                                                  "return this.IsNull(this.table" + ObjetNameFormated + "." + par.Name +
                                                  "Column);");
                        DataBaseClassWriter.Write(nSourceCode, 2, "}");
                    }
                }

                // Tipo complejo
                objectName = FormatCode.ToIdentifier(table.Object_Name);
                objectXmlName = objectName + "Type";

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "public " + objectXmlName + " To" + objectXmlName + "()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "return XmlList<" + objectXmlName + ">.ConvertToXmlBasicType(this);");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Tipo simple
                objectXmlName = objectName + "SimpleType";

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "public " + objectXmlName + " To" + objectXmlName + "()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "return XmlList<" + objectXmlName + ">.ConvertToXmlBasicType(this);");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 0, "#endregion");
                DataBaseClassWriter.Write(nSourceCode, 1, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");


                // Entidad que representa un Row para XML
                // Tipo Complejo
                objectXmlName = objectName + "Type";

                DataBaseClassWriter.Write(nSourceCode, 1, "[Serializable]");
                DataBaseClassWriter.Write(nSourceCode, 1, "public class " + objectXmlName + " : XmlBase");
                DataBaseClassWriter.Write(nSourceCode, 1, "{");
                DataBaseClassWriter.Write(nSourceCode, 1, "    public " + objectXmlName + "() {}");
                nInColumns = nDataBaseMap.GetTableColumns(table);
                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "public " +
                                              DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp,
                                                                                           true) + " " + par.Name + ";");
                }
                DataBaseClassWriter.Write(nSourceCode, 1, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                // Tipo simple
                objectXmlName = objectName + "SimpleType";

                DataBaseClassWriter.Write(nSourceCode, 1, "[Serializable]");
                DataBaseClassWriter.Write(nSourceCode, 1, "public class " + objectXmlName + " : XmlBase");
                DataBaseClassWriter.Write(nSourceCode, 1, "{");
                DataBaseClassWriter.Write(nSourceCode, 1, "    public " + objectXmlName + "() {}");
                nInColumns = nDataBaseMap.GetTableColumns(table);
                foreach (var par in nInColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "public " +
                                              DataBaseClassWriter.getLanguajeStringType(par.Type, LanguajeType.CSharp) +
                                              " " + par.Name + ";");
                }
                DataBaseClassWriter.Write(nSourceCode, 1, "}");


                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion"); //Region Tablas
                DataBaseClassWriter.Write(nSourceCode, 0, "");

            }
        }

        private static void WriteDatasets(ref StringBuilder nSourceCode, DataTable schemas, string nCatalog,
                                          XsdDataBase nDataBaseMap, int nidConnection, bool IsMobile)
        {
            DataBaseClassWriter.Write(nSourceCode, 1, "#region Datasets");
            DataBaseClassWriter.Write(nSourceCode, 0, "");

            foreach (DataRow schema in schemas.Rows)
            {
                var SchemaConfig = nDataBaseMap.TBL_Schema.FindByfk_ConnectionSchema_Name(nidConnection,
                                                                                          schema["Schema_Name"].ToString
                                                                                              ());
                var SchemaNameDataSet = SchemaConfig.Schema_Alias + "DataSet";

                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Data.Design.TypedDataSetGenerator\", \"2.0.0.0\")]");
                DataBaseClassWriter.Write(nSourceCode, 1, "[global::System.Serializable()]");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "[global::System.ComponentModel.DesignerCategoryAttribute(\"code\")]");

                if (!IsMobile)
                    DataBaseClassWriter.Write(nSourceCode, 1, "[global::System.ComponentModel.ToolboxItem(true)]");

                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "[global::System.Xml.Serialization.XmlSchemaProviderAttribute(\"GetTypedDataSetSchema\")]");
                DataBaseClassWriter.Write(nSourceCode, 1,
                                          "[global::System.Xml.Serialization.XmlRootAttribute(\"" + SchemaNameDataSet +
                                          "\")]");

                if (!IsMobile)
                    DataBaseClassWriter.Write(nSourceCode, 1,
                                              "[global::System.ComponentModel.Design.HelpKeywordAttribute(\"vs.data.DataSet\")]");

                DataBaseClassWriter.Write(nSourceCode, 1, "public class " + SchemaNameDataSet + ": DataSet");
                DataBaseClassWriter.Write(nSourceCode, 1, "{");

                var sqlFilter = "(Generic_Type = 'Table' OR Generic_Type = 'View') AND Catalog_Name = '" + nCatalog +
                                "' AND Schema_Name = '" + SchemaConfig.Schema_Name + "' AND Selected = 1";
                var tablas = (XsdDataBase.TBL_ObjectRow[]) (nDataBaseMap.TBL_Object.Select(sqlFilter));

                DataBaseClassWriter.Write(nSourceCode, 2, "#region Declaraciones");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                foreach (var tabla in tablas)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "private Schema" + SchemaConfig.Schema_Alias + "." +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + "DataTable table" +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + ";");
                }
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "#region Propiedades");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                foreach (var tabla in tablas)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");

                    if (!IsMobile)
                    {
                        DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.ComponentModel.Browsable(false)]");
                        DataBaseClassWriter.Write(nSourceCode, 2,
                                                  "[global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]");
                    }

                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "public Schema" + SchemaConfig.Schema_Alias + "." +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + "DataTable " +
                                              FormatCode.ToIdentifier(tabla.Object_Name));
                    DataBaseClassWriter.Write(nSourceCode, 2, "{");
                    DataBaseClassWriter.Write(nSourceCode, 3,
                                              "get { return this.table" + FormatCode.ToIdentifier(tabla.Object_Name) +
                                              "; }");
                    DataBaseClassWriter.Write(nSourceCode, 2, "}");
                    DataBaseClassWriter.Write(nSourceCode, 0, "");
                }
                DataBaseClassWriter.Write(nSourceCode, 0, "");
                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "#region Metodos");
                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "public " + SchemaNameDataSet + "()");
                DataBaseClassWriter.Write(nSourceCode, 3, ": base()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");

                foreach (var tabla in tablas)
                {
                    DataBaseClassWriter.Write(nSourceCode, 3, "if((this.Tables[\"" + tabla.Object_Name + "\"]) == null)");
                    DataBaseClassWriter.Write(nSourceCode, 3, "{");
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "this.table" + FormatCode.ToIdentifier(tabla.Object_Name) +
                                              " = new Schema" + SchemaConfig.Schema_Alias + "." +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + "DataTable();");
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "base.Tables.Add(this.table" + FormatCode.ToIdentifier(tabla.Object_Name) +
                                              ");");
                    DataBaseClassWriter.Write(nSourceCode, 3, "}");
                }

                DataBaseClassWriter.Write(nSourceCode, 2, "}");
                DataBaseClassWriter.Write(nSourceCode, 1, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "protected override bool ShouldSerializeTables()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "return false;");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");
                DataBaseClassWriter.Write(nSourceCode, 1, "");

                DataBaseClassWriter.Write(nSourceCode, 2, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 2, "protected override bool ShouldSerializeRelations()");
                DataBaseClassWriter.Write(nSourceCode, 2, "{");
                DataBaseClassWriter.Write(nSourceCode, 3, "return false;");
                DataBaseClassWriter.Write(nSourceCode, 2, "}");
                DataBaseClassWriter.Write(nSourceCode, 1, "");

                foreach (var tabla in tablas)
                {
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                    DataBaseClassWriter.Write(nSourceCode, 2,
                                              "private bool ShouldSerialize" +
                                              FormatCode.ToIdentifier(tabla.Object_Name) + "()");
                    DataBaseClassWriter.Write(nSourceCode, 2, "{");
                    DataBaseClassWriter.Write(nSourceCode, 3, "return false;");
                    DataBaseClassWriter.Write(nSourceCode, 2, "}");
                    DataBaseClassWriter.Write(nSourceCode, 1, "");
                }
                DataBaseClassWriter.Write(nSourceCode, 2, "#endregion");

                DataBaseClassWriter.Write(nSourceCode, 0, "");

                DataBaseClassWriter.Write(nSourceCode, 1, "}");

                DataBaseClassWriter.Write(nSourceCode, 0, "");
            } // Fin de esquemas

            DataBaseClassWriter.Write(nSourceCode, 1, "#endregion");
        }

        #endregion

        #region Sentecias de acceso

        private static void WriteDBInsert(ref StringBuilder nSourceCode, List<Parameter> nTableColumns)
        {
            var opetarionParams = "";

            foreach (var par in nTableColumns)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp,
                                                                               par.IsNullable) + " n" + par.Name;
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Inserta un nuevo registro a la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3, "public void " + "DBInsert(" + opetarionParams + ") ");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nInParams = new List<Parameter>();");

            foreach (var par in nTableColumns)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nInParams.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBInsert(nInParams);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBInsertTyped(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                               string nObjectName)
        {
            var objectXmlName = FormatCode.ToIdentifier(nObjectName) + "Type";

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Inserta un nuevo registro a la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public void " + "DBInsert(" + objectXmlName + " n" + objectXmlName + ") ");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nInParams = new List<Parameter>();");

            foreach (var par in nTableColumns)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nInParams.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + objectXmlName +
                                          "." + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBInsert(nInParams);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBInsertRow(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                             string nObjectName)
        {
            var objectRowName = FormatCode.ToIdentifier(nObjectName) + "Row";

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Inserta un nuevo registro a la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public void " + "DBInsert(" + objectRowName + " n" + objectRowName + ") ");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nInParams = new List<Parameter>();");

            foreach (var par in nTableColumns)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nInParams.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", base.getColumnValue(n" +
                                          objectRowName + ", \"" + par.Name + "\"), " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBInsert(nInParams);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBNextId(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                          Parameter nKeyParam, bool nMultiKeyParam)
        {
            if (nKeyParam != null && CMData.DataBase.DataBase.IsNumericType(nKeyParam))
            {
                var paramKeyType = DataBaseClassWriter.GetApplicationStringType(nKeyParam.Type, LanguajeType.CSharp);
                var opetarionParams = "";
                string FunctionName = nMultiKeyParam ? "DBNextId_for_" + nKeyParam.Name : "DBNextId";

                foreach (var par in nPrimaryKeys)
                {
                    if (par.Name != nKeyParam.Name)
                    {
                        if (opetarionParams != "") opetarionParams += ", ";
                        opetarionParams = opetarionParams +
                                          DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp,
                                                                                       par.IsNullable) + " n" + par.Name;
                    }
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "/// Calcula el siguiente identificador para un nuevo registro de la tabla");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
                DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "public " + paramKeyType + " " + FunctionName + "(" + opetarionParams + ")");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");

                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nInParams = new List<Parameter>();");
                DataBaseClassWriter.Write(nSourceCode, 4, "string nIdColumn = \"" + nKeyParam.Name + "\";");

                foreach (var par in nPrimaryKeys)
                {
                    if (par.Name != nKeyParam.Name)
                        DataBaseClassWriter.Write(nSourceCode, 4,
                                                  "nInParams.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                                  par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name +
                                                  ", " +
                                                  DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) +
                                                  ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                                  ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "return " + paramKeyType +
                                          ".Parse(base.DBNextId(nInParams, nIdColumn).ToString());");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBSaveTableAutoNextId(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                                       List<Parameter> nPrimaryKeys, Parameter nKeyParam,
                                                       bool nMultiKeyParam)
        {
            if (nPrimaryKeys.Count > 0 && nKeyParam != null && CMData.DataBase.DataBase.IsNumericType(nKeyParam))
            {
                string FunctionName = nMultiKeyParam
                                          ? "DBSaveTableAutoNextId_for_" + nKeyParam.Name
                                          : "DBSaveTableAutoNextId";

                DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "/// Actualiza los registros de la tabla de acuerdo a los estados de cada registro");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");

                DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 3, "public void " + FunctionName + "(DataTable nDataTable)");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nColumnsMapping = new List<Parameter>();");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nPrimaryKeysMapping = new List<Parameter>();");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nColumnsMapping.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", null, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nPrimaryKeysMapping.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", null, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "base.DBSaveTableAutoNextId(nDataTable, nColumnsMapping , nPrimaryKeysMapping , \"" +
                                          nKeyParam.Name + "\");");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBSaveTableAutoNextIdTyped(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                                            List<Parameter> nPrimaryKeys, Parameter nKeyParam,
                                                            string ObjetNameFormated, bool nMultiKeyParam)
        {
            if (nPrimaryKeys.Count > 0 && nKeyParam != null && CMData.DataBase.DataBase.IsNumericType(nKeyParam))
            {
                string FunctionName = nMultiKeyParam
                                          ? "DBSaveTableAutoNextId_for_" + nKeyParam.Name
                                          : "DBSaveTableAutoNextId";

                DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "/// Actualiza los registros de la tabla de acuerdo a los estados de cada registro");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");

                DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "public void " + FunctionName + "(" + ObjetNameFormated +
                                          "DataTable nDataTable)");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nColumnsMapping = new List<Parameter>();");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nPrimaryKeysMapping = new List<Parameter>();");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nColumnsMapping.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", null, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nPrimaryKeysMapping.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", null, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "base.DBSaveTableAutoNextId(nDataTable, nColumnsMapping , nPrimaryKeysMapping , \"" +
                                          nKeyParam.Name + "\");");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBUpdate(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                          List<Parameter> nPrimaryKeys)
        {
            if (nPrimaryKeys.Count > 0)
            {
                DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// Actualiza un registro de la tabla");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");

                var opetarionParams = "";

                foreach (var par in nTableColumns)
                {
                    if (opetarionParams != "") opetarionParams += ", ";
                    opetarionParams = opetarionParams +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                      " n" + par.Name;
                }

                foreach (var par in nPrimaryKeys)
                {
                    if (opetarionParams != "") opetarionParams += ", ";
                    opetarionParams = opetarionParams +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                      " nOriginal_" + par.Name;
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 3, "public void " + "DBUpdate(" + opetarionParams + ")");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nInParams = new List<Parameter>();");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nInParams.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name +
                                              ", " + DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) +
                                              ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }
                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", nOriginal_" +
                                              par.Name + ", " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                DataBaseClassWriter.Write(nSourceCode, 4, "base.DBUpdate(nKeys , nInParams);");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }

        }

        private static void WriteDBUpdateTyped(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                               List<Parameter> nPrimaryKeys, string nObjectName)
        {
            if (nPrimaryKeys.Count > 0)
            {
                var objectXmlName = FormatCode.ToIdentifier(nObjectName) + "Type";

                DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// Actualiza un registro de la tabla");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");

                var opetarionParams = "";

                foreach (var par in nPrimaryKeys)
                {
                    if (opetarionParams != "") opetarionParams += ", ";
                    opetarionParams = opetarionParams +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                      " nOriginal_" + par.Name;
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "public void " + "DBUpdate(" + objectXmlName + " n" + objectXmlName + ", " +
                                          opetarionParams + " )");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nInParams = new List<Parameter>();");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nInParams.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + objectXmlName +
                                              "." + par.Name + ", " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }
                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", nOriginal_" +
                                              par.Name + ", " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                DataBaseClassWriter.Write(nSourceCode, 4, "base.DBUpdate(nKeys , nInParams);");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBSaveTable(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                             List<Parameter> nPrimaryKeys)
        {
            if (nPrimaryKeys.Count > 0)
            {
                DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "/// Actualiza los registros de la tabla de acuerdo a los estados de cada registro");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");

                DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 3, "public void DBSaveTable(DataTable nDataTable)");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nColumnsMapping = new List<Parameter>();");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nPrimaryKeysMapping = new List<Parameter>();");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nColumnsMapping.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", null, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nPrimaryKeysMapping.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", null, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "base.DBSaveTable(nDataTable, nColumnsMapping, nPrimaryKeysMapping);");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBSaveTableTyped(ref StringBuilder nSourceCode, List<Parameter> nTableColumns,
                                                  List<Parameter> nPrimaryKeys, string ObjetNameFormated)
        {
            if (nPrimaryKeys.Count > 0)
            {
                DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "/// Actualiza los registros de la tabla de acuerdo a los estados de cada registro");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");

                DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 3,
                                          "public void " + "DBSaveTable(" + ObjetNameFormated + "DataTable nDataTable)");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nColumnsMapping = new List<Parameter>();");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nPrimaryKeysMapping = new List<Parameter>();");

                foreach (var par in nTableColumns)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nColumnsMapping.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", null, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nPrimaryKeysMapping.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", null, " +
                                              DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                              par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "base.DBSaveTable(nDataTable, nColumnsMapping, nPrimaryKeysMapping);");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBDelete(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys)
        {
            if (nPrimaryKeys.Count > 0)
            {
                DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// Actualiza un registro de la tabla");
                DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");

                var opetarionParams = "";

                foreach (var par in nPrimaryKeys)
                {
                    if (opetarionParams != "") opetarionParams += ", ";
                    opetarionParams = opetarionParams +
                                      DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                      " n" + par.Name;
                }

                DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
                DataBaseClassWriter.Write(nSourceCode, 3, "public void DBDelete(" + opetarionParams + ")");
                DataBaseClassWriter.Write(nSourceCode, 3, "{");
                DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");

                foreach (var par in nPrimaryKeys)
                {
                    DataBaseClassWriter.Write(nSourceCode, 4,
                                              "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                              par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name +
                                              ", " + DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) +
                                              ", " + par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                              ", ParameterDirection." + par.Direction.ToString() + "));");
                }

                DataBaseClassWriter.Write(nSourceCode, 4, "base.DBDelete(nKeys);");
                DataBaseClassWriter.Write(nSourceCode, 3, "}");
                DataBaseClassWriter.Write(nSourceCode, 0, "");
            }
        }

        private static void WriteDBGet(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                       string ObjetNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Retorna registros de la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public " + ObjetNameFormated + "DataTable DBGet(" + opetarionParams + ")");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");
            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }
            DataBaseClassWriter.Write(nSourceCode, 4,
                                      ObjetNameFormated + "DataTable nDataTable = new " + ObjetNameFormated +
                                      "DataTable();");
            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nKeys);");
            DataBaseClassWriter.Write(nSourceCode, 4, "return nDataTable;");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBGetOrderBy(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                              string ObjetNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Retorna registros de la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public " + ObjetNameFormated + "DataTable DBGet(" + opetarionParams +
                                      (opetarionParams == "" ? "" : ", ") + "int nMaxRows, " + ObjetNameFormated +
                                      "EnumList nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4,
                                      ObjetNameFormated + "DataTable nDataTable = new " + ObjetNameFormated +
                                      "DataTable();");
            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nKeys, nMaxRows, nOrderByParams);");
            DataBaseClassWriter.Write(nSourceCode, 4, "return nDataTable;");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFill(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Pobla registros en la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public void DBFill(DataTable nDataTable" +
                                      (opetarionParams == "" ? "" : ", " + opetarionParams) + ")");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nKeys);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillOrderBy(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                               string ObjetNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Pobla registros en la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public void DBFill(DataTable nDataTable" +
                                      (opetarionParams == "" ? "" : ", " + opetarionParams) + ", int nMaxRows, " +
                                      ObjetNameFormated + "EnumList nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nKeys, nMaxRows, nOrderByParams);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillTyped(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                             string ObjetNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Pobla registros en la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public void DBFill(" + ObjetNameFormated + "DataTable nDataTable" +
                                      (opetarionParams == "" ? "" : ", " + opetarionParams) + ")");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nKeys);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillOrderByTyped(ref StringBuilder nSourceCode, List<Parameter> nPrimaryKeys,
                                                    string ObjetNameFormated)
        {
            var opetarionParams = "";

            foreach (var par in nPrimaryKeys)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// Pobla registros en la tabla");
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public void DBFill(" + ObjetNameFormated + "DataTable nDataTable" +
                                      (opetarionParams == "" ? "" : ", " + opetarionParams) + ", int nMaxRows, " +
                                      ObjetNameFormated + "EnumList nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nKeys = new List<Parameter>();");

            foreach (var par in nPrimaryKeys)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nKeys.Add(new Parameter(\"" + par.Name + "\", DbType." + par.Type.ToString() +
                                          ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nKeys, nMaxRows, nOrderByParams);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFindBy(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                          XsdDataBase.TBL_ObjectRow tabla, ref int idMetodo,
                                          XsdDataBase.TBL_FilterRow filtro, string ObjetNameFormated)
        {
            var nFilterParam = nDataBaseMap.GetFilterColumns(filtro, tabla.id_Object);
            var opetarionParams = "";
            var strLine = "";

            foreach (var par in nFilterParam)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
                strLine += " " + par.Name;
            }

            var FunctionName = strLine.Replace(" ", "");

            if (FunctionName.Length > 500)
            {
                idMetodo++;
                FunctionName = FunctionName.Substring(0, 500) + idMetodo.ToString();
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "/// Retorna registros de la tabla " + tabla.Object_Name + ", filtrando por" +
                                      strLine);
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public " + ObjetNameFormated + "DataTable DBFindBy" + FunctionName + "(" +
                                      opetarionParams + ")");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nFilters = new List<Parameter>();");
            foreach (var par in nFilterParam)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nFilters.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }
            DataBaseClassWriter.Write(nSourceCode, 4,
                                      FormatCode.ToIdentifier(tabla.Object_Name) + "DataTable nDataTable = new " +
                                      ObjetNameFormated + "DataTable();");
            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nFilters);");
            DataBaseClassWriter.Write(nSourceCode, 4, "return nDataTable;");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFindByOrderBy(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                                 XsdDataBase.TBL_ObjectRow tabla, ref int idMetodo,
                                                 XsdDataBase.TBL_FilterRow filtro, string ObjetNameFormated)
        {
            var nFilterParam = nDataBaseMap.GetFilterColumns(filtro, tabla.id_Object);
            var opetarionParams = "";
            var strLine = "";

            foreach (var par in nFilterParam)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
                strLine += " " + par.Name;
            }

            var FunctionName = strLine.Replace(" ", "");

            if (FunctionName.Length > 500)
            {
                idMetodo++;
                FunctionName = FunctionName.Substring(0, 500) + idMetodo.ToString();
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "/// Retorna registros de la tabla " + tabla.Object_Name + ", filtrando por" +
                                      strLine);
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public " + ObjetNameFormated + "DataTable DBFindBy" + FunctionName + "(" +
                                      opetarionParams + (opetarionParams == "" ? "" : ", ") + "int nMaxRows, " +
                                      ObjetNameFormated + "EnumList nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nFilters = new List<Parameter>();");

            foreach (var par in nFilterParam)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nFilters.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }

            DataBaseClassWriter.Write(nSourceCode, 4,
                                      FormatCode.ToIdentifier(tabla.Object_Name) + "DataTable nDataTable = new " +
                                      ObjetNameFormated + "DataTable();");
            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nFilters, nMaxRows, nOrderByParams);");
            DataBaseClassWriter.Write(nSourceCode, 4, "return nDataTable;");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillBy(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                          XsdDataBase.TBL_ObjectRow tabla, ref int idMetodo,
                                          XsdDataBase.TBL_FilterRow filtro)
        {
            var nFilterParam = nDataBaseMap.GetFilterColumns(filtro, tabla.id_Object);
            var opetarionParams = "";
            var strLine = "";

            foreach (var par in nFilterParam)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
                strLine += " " + par.Name;
            }

            var FunctionName = strLine.Replace(" ", "");

            if (FunctionName.Length > 500)
            {
                idMetodo++;
                FunctionName = FunctionName.Substring(0, 500) + idMetodo.ToString();
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "/// Pobla registros en la tabla " + tabla.Object_Name + ", filtrando por" +
                                      strLine);
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public void DBFillBy" + FunctionName + "(DataTable nDataTable, " +
                                      opetarionParams + ")");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nFilters = new List<Parameter>();");
            foreach (var par in nFilterParam)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nFilters.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }
            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nFilters);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        private static void WriteDBFillByOrderBy(ref StringBuilder nSourceCode, XsdDataBase nDataBaseMap,
                                                 XsdDataBase.TBL_ObjectRow tabla, ref int idMetodo,
                                                 XsdDataBase.TBL_FilterRow filtro, string ObjetNameFormated)
        {
            var nFilterParam = nDataBaseMap.GetFilterColumns(filtro, tabla.id_Object);
            var opetarionParams = "";
            var strLine = "";

            foreach (var par in nFilterParam)
            {
                if (opetarionParams != "")
                    opetarionParams += ", ";

                opetarionParams = opetarionParams +
                                  DataBaseClassWriter.GetApplicationStringType(par.Type, LanguajeType.CSharp, true) +
                                  " n" + par.Name;
                strLine += " " + par.Name;
            }

            var FunctionName = strLine.Replace(" ", "");

            if (FunctionName.Length > 500)
            {
                idMetodo++;
                FunctionName = FunctionName.Substring(0, 500) + idMetodo.ToString();
            }

            DataBaseClassWriter.Write(nSourceCode, 3, "/// <summary>");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "/// Pobla registros en la tabla " + tabla.Object_Name + ", filtrando por" +
                                      strLine);
            DataBaseClassWriter.Write(nSourceCode, 3, "/// </summary>");
            DataBaseClassWriter.Write(nSourceCode, 3, "[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
            DataBaseClassWriter.Write(nSourceCode, 3,
                                      "public void DBFillBy" + FunctionName + "(DataTable nDataTable, " +
                                      opetarionParams + ", int nMaxRows, " + ObjetNameFormated +
                                      "EnumList nOrderByParams)");
            DataBaseClassWriter.Write(nSourceCode, 3, "{");
            DataBaseClassWriter.Write(nSourceCode, 4, "List<Parameter> nFilters = new List<Parameter>();");
            foreach (var par in nFilterParam)
            {
                DataBaseClassWriter.Write(nSourceCode, 4,
                                          "nFilters.Add(new Parameter(\"" + par.Name + "\", DbType." +
                                          par.Type.ToString() + ", \"" + par.SpecificType + "\", n" + par.Name + ", " +
                                          DataBaseClassWriter.getBoolean(par.IsNullable, LanguajeType.CSharp) + ", " +
                                          par.MaxLength + ", " + par.Precision + ", " + par.Scale +
                                          ", ParameterDirection." + par.Direction.ToString() + "));");
            }
            DataBaseClassWriter.Write(nSourceCode, 4, "base.DBFill(nDataTable, nFilters, nMaxRows, nOrderByParams);");
            DataBaseClassWriter.Write(nSourceCode, 3, "}");
            DataBaseClassWriter.Write(nSourceCode, 0, "");
        }

        #endregion
    }
}